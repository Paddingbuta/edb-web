#include <stdint.h>
#include <stdio.h>
#include <assert.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <string.h>
#include <sys/types.h>

#define NTHREADS 500
#define CALLS_PER_THREAD 10

int start_gate = 0;
int done = 0;

int *
mycalloc(void)
{
	int *tmp;

	tmp = calloc(512, sizeof(*tmp));
	assert(tmp);

	tmp[507] = 0xdecafbad;
	tmp[508] = 1;

	return tmp;
}

void *
client_run_func(void *data)
{
	long i;

	(void)data;

	__sync_fetch_and_add(&start_gate, 1);

	while (__sync_add_and_fetch(&start_gate, 0) < NTHREADS)
		usleep(1000);

	for (i=0; i < CALLS_PER_THREAD ; i++) {
		int* call_handle;
		call_handle = mycalloc();
		assert(call_handle);

		assert(call_handle[510] == 0);
		usleep(100000);
	}

	__sync_fetch_and_add(&done, 1);

	return NULL;
}

int
main(void)
{
	pthread_t tids[NTHREADS];
	long i;
	int ret;

	for (i=0; i < NTHREADS; i++) {
		ret = pthread_create(&tids[i], NULL, client_run_func, NULL);
		assert(!ret);
	}

	while (__sync_add_and_fetch(&done, 0) < NTHREADS)
		usleep(100000);
	return 0;
}
