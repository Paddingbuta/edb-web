{
    "bugid": "662189",
    "cveid": [
        "CVE-2010-4346"
    ],
    "summary": "CVE-2010-4346 kernel: install_special_mapping skips security_file_mmap check",
    "alias": "CVE-2010-4346",
    "product": "Security Response",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2010-12-10 20:28 UTC byPetr Matousek",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=468055",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=468057"
    ],
    "comment": [
        "The install_special_mapping routine (used, for example, to setup the vdso) skips the security check before insert_vm_struct, allowing a local attacker to bypass the mmap_min_addr security restriction by limiting the available pages for special mappings.\n\nReference:https://lkml.org/lkml/2010/12/9/222http://seclists.org/oss-sec/2010/q4/307Acknowledgements:\nRed Hat would like to thank Tavis Ormandy for reporting this issue.",
        "Statement:\n\nThe Linux kernel as shipped with Red Hat Enterprise Linux 4 is not vulnerable because it checks for mmap_min_addr even in special cases.\n\nThe Linux kernel as shipped with Red Hat Enterprise Linux 5, 6, and Red Hat Enterprise MRG have mmap_min_addr sysctl tunable set to 4096, and therefore are not affected by this issue. However, as a preventive measure (for example, for administrators who have increased mmap_min_addr), we have addressed this in Red Hat Enterprise Linux 5, 6 and MRG viahttps://rhn.redhat.com/errata/RHSA-2011-0429.html,https://rhn.redhat.com/errata/RHSA-2011-0421.html, andhttps://rhn.redhat.com/errata/RHSA-2011-0330.html.",
        "Createdattachment 468055[details]Patch proposed by Tavis Ormandi",
        "Createdattachment 468057[details]RHEL5'ish patch proposed by Solar Designer",
        "(In reply tocomment #2)> The Linux kernel as shipped with Red Hat Enterprise Linux 5, 6, and Red Hat\n> Enterprise MRG have mmap_min_addr sysctl tunable set to 4096, and therefore are\n> not affected by this issue.I think this is a misunderstanding.  Your setting of mmap_min_addr to 4096 is precisely what makes you vulnerable to the fullest extent: the attack demonstrated by Tavis allows to map a page at exactly one page below mmap_min_addr, and you only have exactly one page - so it should get mapped at 0 (NULL).  Isn't this what happens when you try Tavis' PoC program on a clean RHEL 5 or 6 system?  I must admit I have not tried.  There might be something that prevents this from happening, but no one has mentioned such a thing so far (or have I missed it?)",
        "(In reply tocomment #6)> (In reply tocomment #2)\n> > The Linux kernel as shipped with Red Hat Enterprise Linux 5, 6, and Red Hat\n> > Enterprise MRG have mmap_min_addr sysctl tunable set to 4096, and therefore are\n> > not affected by this issue.\n> \n> I think this is a misunderstanding.  Your setting of mmap_min_addr to 4096 is\n> precisely what makes you vulnerable to the fullest extent: the attack\n> demonstrated by Tavis allows to map a page at exactly one page below\n> mmap_min_addr, and you only have exactly one page - so it should get mapped at\n> 0 (NULL).  Isn't this what happens when you try Tavis' PoC program on a clean\n> RHEL 5 or 6 system?  I must admit I have not tried.  There might be something\n> that prevents this from happening, but no one has mentioned such a thing so far\n> (or have I missed it?)Update:\nThe following seems to be true for RHEL6. On both systems vm.overcommit_memory=1 might be needed. On my testing RHEL5 system vdso keeps to be mapped to 0xffffe000 which looks like COMPAT_VDSO. Either way I was not able to use intstall_special_mapping() to map anything to address 0 on RHEL.\n\n--\n\nThis is what I was thinking first as well and tried to make the vdso getting mapped to address 0. I tested it on a a 2.6.35 upstream kernel, but on RHEL it's the same (32bit program on x86-64, on 32bit it's similar):\n\ncynique@gentoo64 ~ $ cat /proc/2588/maps\n00001000-00002000 r-xp 00001000 03:03 230335   /home/cynique/nada\n00002000-ffff2000 rwxp 00000000 00:00 0       [stack]\nffff2000-ffff3000 r-xp 00000000 00:00 0       [vdso]\ncynique@gentoo64 ~ $ nasm -D__NR_pause=29 -DBSS_SIZE=0xffffc000 -f elf -o nada.o nada.s\ncynique@gentoo64 ~ $ ld -m elf_i386 -Ttext=0x1000 -Tbss=0x2000 -o nada nada.o   cynique@gentoo64 ~ $ ./nada\nKilled\ncynique@gentoo64 ~ $\n\nbreakpoint 4, arch_get_unmapped_area_topdown (filp=0x0, addr0=0x0, len=0x1000, pgoff=0x0, flags=0x0) at arch/x86/kernel/sys_x86_64.c:192\n192\t\t} while (len < vma->vm_start);\ngdb> p len\n$23 = 0x1000\ngdb> p vma->vm_start\n$24 = 0x1000\ngdb> \n\nThe problem AFAIK is in the while condition: the len is 0x1000 because we are looking for one page and the next vma->vm_start is 0x1000 as that is a vma with /home/cynique/nada. The condition (len < vma->vm_start) effectively skips the free page.\n\nAfter the \"} while (len <= vma->vm_start);\" patch\n\ncynique@gentoo64 ~ $ nasm -D__NR_pause=29 -DBSS_SIZE=0xffffc000 -f elf -o nada.o nada.s\ncynique@gentoo64 ~ $ ld -m elf_i386 -Ttext=0x1000 -Tbss=0x2000 -o nada nada.o\ncynique@gentoo64 ~ $ ./nada &\n[1] 2555\ncynique@gentoo64 ~ $ cat /proc/2555/maps\n00000000-00001000 r-xp 00000000 00:00 0          [vdso]\n00001000-00002000 r-xp 00001000 03:03 230335     /home/cynique/nada\n00002000-ffffe000 rwxp 00000000 00:00 0          [stack]\ncynique@gentoo64 ~ $ cat /proc/sys/vm/mmap_min_addr\n4096\ncynique@gentoo64 ~ $",
        "Upstream commit 462e635e5b73ba9a4c03913b77138cd57ce4b050http://git.kernel.org/linus/462e635e5b73ba9a4c03913b77138cd57ce4b050",
        "This issue has been addressed in following products:\n\n  MRG for RHEL-5\n\nVia RHSA-2011:0330https://rhn.redhat.com/errata/RHSA-2011-0330.html",
        "This issue has been addressed in following products:\n\n  Red Hat Enterprise Linux 6\n\nVia RHSA-2011:0421https://rhn.redhat.com/errata/RHSA-2011-0421.html",
        "This issue has been addressed in following products:\n\n  Red Hat Enterprise Linux 5\n\nVia RHSA-2011:0429https://rhn.redhat.com/errata/RHSA-2011-0429.html"
    ]
}