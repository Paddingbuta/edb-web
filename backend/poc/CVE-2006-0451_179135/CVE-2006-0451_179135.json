{
    "bugid": "179135",
    "cveid": [
        "CVE-2006-0451",
        "CVE-2006-0453"
    ],
    "summary": "CVE-2006-0451 memory leaks using ber_scanf when handling bad BER packets (CVE-2006-0453)",
    "alias": "CVE-2006-0451",
    "product": "Security Response",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2006-01-27 16:55 UTC byRich Megginson",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=123783",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=123784"
    ],
    "comment": [
        "There are many places in our code where we assume that if ber_scanf returns an\nerror, this means it did not allocate any memory.  That is not the case. \nber_get_stringa first reads the length, then allocates the memory to read into,\nthen does the actual reading.  If it receives an error from ber_read while\nreading the buffer, it will short circuit and return with an allocated (but\nuninitialized) buffer that must be freed by the caller.\nber_get_stringal does not have this problem, but suffers from a different\nproblem which will be addressed in the ldap sdk.\nThere is a similar problem with using ber_scanf 'v' or 'V' to read in arrays. \nHowever, in that case, cleanup is problematic due to a bug in the ldap sdk -\nafter allocating space for the array, we do not set the array element (the\nstring) to NULL, so if we try to free it, we get a free of uninitialized memory.\n This will also be fixed in the ldap sdk.",
        "Createdattachment 123783[details]files for fix",
        "Createdattachment 123784[details]diffs for fix",
        "Note of CVE names:\n\n        CVE-2006-0451: A number of memory leaks due to BER error\n        handling can cause the server to run out of memory and exit\n\n        CVE-2006-0453: A bad BER sequence can be handled incorrectly\n        and lead to a crash due to unitialized memory free.",
        "Checking in ldapserver/ldap/servers/plugins/replication/repl5_total.c;\n/cvs/dirsec/ldapserver/ldap/servers/plugins/replication/repl5_total.c,v  <-- \nrepl5_total.c\nnew revision: 1.6; previous revision: 1.5\ndone\nChecking in ldapserver/ldap/servers/plugins/replication/repl_controls.c;\n/cvs/dirsec/ldapserver/ldap/servers/plugins/replication/repl_controls.c,v  <--\nrepl_controls.c\nnew revision: 1.6; previous revision: 1.5\ndone\nChecking in ldapserver/ldap/servers/plugins/replication/repl_extop.c;\n/cvs/dirsec/ldapserver/ldap/servers/plugins/replication/repl_extop.c,v  <-- \nrepl_extop.c\nnew revision: 1.8; previous revision: 1.7\ndone\nChecking in ldapserver/ldap/servers/slapd/add.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/add.c,v  <--  add.c\nnew revision: 1.6; previous revision: 1.5\ndone\nChecking in ldapserver/ldap/servers/slapd/ava.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/ava.c,v  <--  ava.c\nnew revision: 1.5; previous revision: 1.4\ndone\nChecking in ldapserver/ldap/servers/slapd/bind.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/bind.c,v  <--  bind.c\nnew revision: 1.7; previous revision: 1.6\ndone\nChecking in ldapserver/ldap/servers/slapd/compare.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/compare.c,v  <--  compare.c\nnew revision: 1.5; previous revision: 1.4\ndone\nChecking in ldapserver/ldap/servers/slapd/delete.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/delete.c,v  <--  delete.c\nnew revision: 1.5; previous revision: 1.4\ndone\nChecking in ldapserver/ldap/servers/slapd/filter.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/filter.c,v  <--  filter.c\nnew revision: 1.6; previous revision: 1.5\ndone\nChecking in ldapserver/ldap/servers/slapd/modify.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/modify.c,v  <--  modify.c\nnew revision: 1.9; previous revision: 1.8\ndone\nChecking in ldapserver/ldap/servers/slapd/modrdn.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/modrdn.c,v  <--  modrdn.c\nnew revision: 1.5; previous revision: 1.4\ndone\nChecking in ldapserver/ldap/servers/slapd/back-ldbm/sort.c;\n/cvs/dirsec/ldapserver/ldap/servers/slapd/back-ldbm/sort.c,v  <--  sort.c\nnew revision: 1.6; previous revision: 1.5\ndone",
        "Reviewed by: All (Thanks!)\nFiles:https://bugzilla.redhat.com/bugzilla/attachment.cgi?id=123783Branch: HEAD\nFix Description:https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=179135#c0I basically did a search through our code for all calls to ber_scanf, \nber_get_stringa, and ber_get_stringal and made sure we properly free any \narguments that may have been allocated.  There was a bug in the ldapsdkhttps://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=179135that causes \nus to free uninitialized memory when trying to clean up the result of \nber_get_stringal (or ber_scanf with 'V').  I had to initialize some \nvariables to NULL so that we could properly clean them up, and added \nsome additional clean ups that were missing.  Also, in repl_extop.c, we \nwere calling free on an array that we should have been calling \nch_array_free on.  Yet another lesson in the evils of slapi_ch_free and \ndisabling compiler type checks in general.\nPlatforms tested: Fedora Core 4\nFlag Day: no\nDoc impact: no",
        "Ran various iterations of Rich's ber test script (Thanks a lot Rich!).\n\nVerified against DS 7.1 SP2 20060314.1 and DS 6.21 SP3 20060310.1.\n\n20k loop runs in addition to 100k loop runs didn't show significant memory usage\nincrease against the above candidate builds.\n\nNote that 100k runs took about 3 weeks to complete, while 20k took about 2 days.",
        "Somehow the errata system did not automatically close these bugs even though DS\nSP 2 is shipped and available live on RHN",
        "trying to manually close"
    ]
}