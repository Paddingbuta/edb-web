{
    "bugid": "1684058",
    "cveid": [
        "CVE-2019-9169"
    ],
    "summary": "CVE-2019-9169 glibc: regular-expression match via proceed_next_node in posix/regexec.c leads to heap-based buffer over-read [fedora-all]",
    "alias": "None",
    "product": "Fedora",
    "hardware": "Unspecified",
    "os": "Unspecified",
    "url": "",
    "reported_date": "2019-02-28 10:34 UTC bymsiddiqu",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1552434"
    ],
    "comment": [
        "This is an automatically created tracking bug!  It was created to ensure\nthat one or more security vulnerabilities are fixed in affected versions\nof fedora-all.\n\nFor comments that are specific to the vulnerability please use bugs filed\nagainst the \"Security Response\" product referenced in the \"Blocks\" field.\n\nFor more information see:http://fedoraproject.org/wiki/Security/TrackingBugsWhen submitting as an update, use the fedpkg template provided in the next\ncomment(s).  This will include the bug IDs of this tracking bug as well as\nthe relevant top-level CVE bugs.\n\nPlease also mention the CVE IDs being fixed in the RPM changelog and the\nfedpkg commit message.\n\nNOTE: this issue affects multiple supported versions of Fedora. While only\none tracking bug has been filed, please correct all affected versions at\nthe same time.  If you need to fix the versions independent of each other,\nyou may clone this bug as appropriate.",
        "Use the following template to for the 'fedpkg update' request to submit an\nupdate for this issue as it contains the top-level parent bug(s) as well as\nthis tracking bug.  This will ensure that all associated bugs get updated\nwhen new packages are pushed to stable.\n\n=====\n\n# bugfix, security, enhancement, newpackage (required)\ntype=security\n\n# low, medium, high, urgent (required)\nseverity=medium\n\n# testing, stable\nrequest=testing\n\n# Bug numbers: 1234,9876\nbugs=1684057,1684058\n\n# Description of your update\nnotes=Security fix for [PUT CVEs HERE]\n\n# Enable request automation based on the stable/unstable karma thresholds\nautokarma=True\nstable_karma=3\nunstable_karma=-3\n\n# Automatically close bugs when this marked as stable\nclose_bugs=True\n\n# Suggest that users restart after update\nsuggest_reboot=False\n\n======\n\nAdditionally, you may opt to use the bodhi web interface to submit updates:https://bodhi.fedoraproject.org/updates/new",
        "Createdattachment 1552434[details]coredumpctl debug / gdb output for segmentation fault running echo 0 | sed '/\\(\\)\\(\\1\\(\\)\\1\\(\\)\\)*/c0'\n\nI read in the glibc-2.28-27.fc29 bodhi change log thatCVE-2019-9169was fixed\n\"RecordCVE-2019-9169in NEWS and ChangeLog [BZ #24114]\nregex: fix read overrun [BZ #24114]\"https://bodhi.fedoraproject.org/updates/FEDORA-2019-5fcc2049a1I tested the reproducer given by Huzaifa S. Sidhpurwala athttps://bugzilla.redhat.com/show_bug.cgi?id=1684057#c3echo 0 | sed '/\\(\\)\\(\\1\\(\\)\\1\\(\\)\\)*/c0'\nwith glibc-2.28-26 and after upgrading to glibc-2.28-27 and rebooting. I got segmentation faults with both 2.28-27 and 2.28-26 in check_dst_limits_calc_pos_1 at regexec.c:1945. The following output and attachment are with 2.28-27.\n\nCore was generated by `sed /\\(\\)\\(\\1\\(\\)\\1\\(\\)\\)*/c0'.\nProgram terminated with signal SIGSEGV, Segmentation fault.\n#0  0xb7e2609b in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, \n    bkref_idx=0) at regexec.c:1945\n1945                      cpos =\n\nThe trace showed that check_dst_limits_calc_pos_1 at regexec.c:1945 repeated from #0 to #87215 with the only apparent difference being an alternation of from_node=6 to from_node=3\n\n(gdb) bt\n#0  0xb7e2609b in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, \n    bkref_idx=0) at regexec.c:1945\n#1  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=3, \n    bkref_idx=0) at regexec.c:1945\n#2  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, \n    bkref_idx=0) at regexec.c:1945\n#3  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=3, \n    bkref_idx=0) at regexec.c:1945\n#4  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, \n    bkref_idx=0) at regexec.c:1945\n#5  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=3, \n    bkref_idx=0) at regexec.c:1945\n#6  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, \n    bkref_idx=0) at regexec.c:1945\n#7  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=3, \n    bkref_idx=0) at regexec.c:1945\n#8  0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0xbfb98584, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, \n    bkref_idx=0) at regexec.c:1945\n...\n#87216 0xb7e260ad in check_dst_limits_calc_pos_1 (mctx=0xbfb98584, boundaries=3, subexp_idx=0, from_node=2, bkref_idx=0) at regexec.c:1945\n#87217 0xb7e2619b in check_dst_limits_calc_pos (mctx=mctx@entry=0xbfb98584, limit=<optimized out>, subexp_idx=subexp_idx@entry=0, from_node=<optimized out>, str_idx=<optimized out>, bkref_idx=0) at regexec.c:2001\n#87218 0xb7e27d42 in check_dst_limits (mctx=mctx@entry=0xbfb98584, dst_node=2, dst_idx=0, src_node=3, src_idx=0, limits=<optimized out>, limits=<optimized out>) at regexec.c:1879\n#87219 0xb7e30982 in sift_states_bkref (candidates=0x93dc14, str_idx=0, sctx=<optimized out>, mctx=0xbfb98584) at regexec.c:2141\n#87220 update_cur_sifted_state (mctx=mctx@entry=0xbfb98584, sctx=sctx@entry=0xbfb98410, str_idx=str_idx@entry=0, dest_nodes=0xbfb98390) at regexec.c:1779\n#87221 0xb7e2ed03 in sift_states_backward (mctx=mctx@entry=0xbfb98584, sctx=sctx@entry=0xbfb98410) at regexec.c:1586\n#87222 0xb7e309df in sift_states_bkref (candidates=0x93dc14, str_idx=0, sctx=<optimized out>, mctx=0xbfb98584) at regexec.c:2164\n#87223 update_cur_sifted_state (mctx=mctx@entry=0xbfb98584, sctx=sctx@entry=0xbfb98568, str_idx=str_idx@entry=0, dest_nodes=0xbfb984a0) at regexec.c:1779\n#87224 0xb7e2ed03 in sift_states_backward (mctx=mctx@entry=0xbfb98584, sctx=sctx@entry=0xbfb98568) at regexec.c:1586\n#87225 0xb7e301fc in prune_impossible_nodes (mctx=0xbfb98584) at regexec.c:956\n#87226 re_search_internal (preg=0x93c020, string=0x93d970 \"0\", length=1, start=<optimized out>, last_start=1, stop=1, nmatch=1, pmatch=0x93d910, eflags=0) at regexec.c:823\n#87227 0xb7e3475d in re_search_stub (bufp=0x93c020, string=0x93d970 \"0\", length=length@entry=1, start=0, range=1, stop=1, regs=0x0, ret_len=false) at regexec.c:424\n#87228 0xb7e350c7 in __re_search (bufp=<optimized out>, string=<optimized out>, length=1, start=<optimized out>, range=<optimized out>, regs=0x0) at regexec.c:289\n#87229 0x004427b7 in match_regex (regex=0x93c020, buf=0x93d970 \"0\", buflen=1, buf_start_offset=<optimized out>, regarray=0x0, regsize=0) at sed/regexp.c:418\n#87230 0x0044004d in match_an_address_p (addr=<optimized out>, input=input@entry=0xbfb997c8) at sed/execute.c:802\n#87231 0x00440e08 in match_address_p (input=0xbfb997c8, cmd=0x93bc00) at sed/execute.c:841\n#87232 execute_program (vec=vec@entry=0x93ac00, input=input@entry=0xbfb997c8) at sed/execute.c:1289\n#87233 0x00441f21 in process_files (the_program=0x93ac00, argv=0xbfb9995c) at sed/execute.c:1679\n#87234 0x0043caaf in main (argc=<optimized out>, argv=<optimized out>) at sed/sed.c:401\n\nI ran echo 0 | valgrind --log-file=valgrind_sed_1.txt sed '/\\(\\)\\(\\1\\(\\)\\1\\(\\)\\)*/c0' , but I got a stack overflow error seemingly in valgrind itself due to the large stack size.\n\n==2776== Stack overflow in thread #1: can't grow stack to 0xbe07e000\n==2776== \n==2776== Process terminating with default action of signal 11 (SIGSEGV): dumping core\n==2776==  Access not within mapped region at address 0xBE07EFF4\n==2776== Stack overflow in thread #1: can't grow stack to 0xbe07e000\n==2776==    at 0x4966F7A: check_dst_limits_calc_pos_1 (regexec.c:1901)\n==2776==  If you believe this happened as a result of a stack\n==2776==  overflow in your program's main thread (unlikely but\n==2776==  possible), you can try to increase the size of the\n==2776==  main thread stack using the --main-stacksize= flag.\n==2776==  The main thread stack size used in this run was 8388608.\n==2776== Stack overflow in thread #1: can't grow stack to 0xbe07e000\n--2776-- VALGRIND INTERNAL ERROR: Valgrind received a signal 11 (SIGSEGV) - exiting\n--2776-- si_code=1;  Faulting address: 0xBE07EFE0;  sp: 0x629ccf30\n\nvalgrind: the 'impossible' happened:\n   Killed by fatal signal\n\nhost stacktrace:\n==2776==    at 0x580A3DFA: ??? (in /usr/lib/valgrind/memcheck-x86-linux)\n\nsched status:\n  running_tid=1\n\nThread 1: status = VgTs_Runnable (lwpid 2776)\n\necho 0 | valgrind --log-file=valgrind_sed_6.txt --main-stacksize=100000000 sed '/\\(\\)\\(\\1\\(\\)\\1\\(\\)\\)*/c0' gave the same stack overflow error after I increased the main thread stack size from what I think were 8.3 MB to 100 MB. I can try other methods and give further information if that would help.",
        "I'm seeing this failure in rawhide as well, and it seems to be triggered by a different part of the code:\n\n#10 0x00007f17d56b2b1a in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0x7ffd7df806e0, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, bkref_idx=bkref_idx@entry=0)\n    at regexec.c:1945\n#11 0x00007f17d56b2b1a in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0x7ffd7df806e0, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=3, bkref_idx=bkref_idx@entry=0)\n    at regexec.c:1945\n#12 0x00007f17d56b2b1a in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0x7ffd7df806e0, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=6, bkref_idx=bkref_idx@entry=0)\n    at regexec.c:1945\n#13 0x00007f17d56b2b1a in check_dst_limits_calc_pos_1 (mctx=mctx@entry=0x7ffd7df806e0, \n    boundaries=boundaries@entry=3, subexp_idx=subexp_idx@entry=0, from_node=3, bkref_idx=bkref_idx@entry=0)\n    at regexec.c:1945\n\nNote the tic-toc of from_node between 6 and 3.  In the code in question we see:\n\n\t\t  /* Recurse trying to reach the OP_OPEN_SUBEXP and\n\t\t     OP_CLOSE_SUBEXP cases below.  But, if the\n\t\t     destination node is the same node as the source\n\t\t     node, don't recurse because it would cause an\n\t\t     infinite loop: a regex that exhibits this behavior\n\t\t     is ()\\1*\\1*  */\n\nSo the source knows that such types of recursions are (1) possible, and (2) lead to inifinite recursion, but\nonly tests for the same nodes each time, not a tic-toc of nodes.\n\nSo while the test case above does eventually segfault (due to out-of-stack) it does not segfault due\nto buffer overflow, so I don't think it's a faithful indicator of the original CVE.",
        "DJ, I agree with your assessment. I see now thatCVE-2019-9169was assigned to the report athttps://debbugs.gnu.org/cgi/bugreport.cgi?bug=34140with reproducer ./grep -i '\\(\\(\\)*.\\)*\\(\\)\\(\\)\\1' /bin/chvt with a heap-buffer overflow in proceed_next_node at regexec.c:1296. When I ran grep -i '\\(\\(\\)*.\\)*\\(\\)\\(\\)\\1' /bin/chvt, the output was Binary file /bin/chvt matches. I didn't see a crash for that grep command reproducer.\n\nThe crashes I referred to incomment 2with reproducer echo 0 | ./sed '/\\(\\)\\(\\1\\(\\)\\1\\(\\)\\)*/c0' appear to have been reported athttps://debbugs.gnu.org/cgi/bugreport.cgi?bug=34141with a stack overflow in check_dst_limits_calc_pos_1 at regexec.c:1912. So those crashes are a different problem fromCVE-2019-9169. I could make another report if that would be appropriate. Thanks.",
        "The regular expression compiler in glibc is only supposed to be exposed to trusted content, so this is not a security vulnerability:\n\n\u201cresource exhaustion issues which can be triggered only with crafted patterns (either during compilation or execution) are not treated as security bugs\u201d\n\n<https://sourceware.org/glibc/wiki/Security%20Exceptions>"
    ]
}