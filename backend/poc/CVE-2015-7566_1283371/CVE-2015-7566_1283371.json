{
    "bugid": "1283371",
    "cveid": [
        "CVE-2015-7566"
    ],
    "summary": "CVE-2015-7566 Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid  USB device descriptors (visor driver) [local-DoS]",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 7",
    "hardware": "Unspecified",
    "os": "Unspecified",
    "url": "",
    "reported_date": "2015-11-18 20:14 UTC byRalf Spenneberg",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096273",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096276",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096277"
    ],
    "comment": [
        "Description of problem:\n\nLocal RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (visor driver) [local-DoS]\n\n\nVersion-Release number of selected component (if applicable):\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n\nHow reproducible:\nalways\n\n\nOpenSource Security Ralf Spenneberg\nAm Bahnhof 3-5\n48565 Steinfurt\ninfo\n\n\nDate: November 12th, 2015\nAuthors: Sergej Schumilo, Hendrik Schwartke, Ralf Spenneberg\nCVE: not yet assigned\nCVSS: 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C) \nTitle: Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (visor driver) [local-DoS]\nSeverity: Critical. The Kernel panics. A reboot is required.\nEase of Exploitation: Trivial\nVulnerability type: Wrong input validation\nProducts: RHEL 7.1 including all updates\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n(for debugging-purposes we used the CentOS Kernel kernel-debuginfo-3.10.0-229.14.1.el7)\n\n\nAbstract\nThe Kernel 3.10.0-229.20.1.el7.x86_64 crashes when presented a buggy USB \ndevice which requires the visor driver.\nDetailed product description\nWe confirmed the bug on the following system:\nRHEL 7.1\nKernel = 3.10.0-229.20.1.el7.x86_64\nFurther products or kernel versions have not been tested.\nHow reproducible: Always\nActual results: Kernel crashes \n\nDescription:\nThe bug was found using the USB-fuzzing framework vUSBf from Sergej Schumilo \n(github.com/schumilo) using the following device descriptor:\n\n ######### PAYLOAD 1 #########\n[*] Device-Descriptor\n  bLength:\t\t0x12\n  bDescriptorType:\t0x1\n  bcdUSB:\t\t0x200\n  bDeviceClass:\t\t0x3\n  bDeviceSubClass:\t0x0\n  bDeviceProtocol:\t0x0\n  bMaxPacketSize:\t0x40\n  idVendor:\t\t0x54c\n  idProduct:\t\t0x144\n  bcdDevice:\t\t0x100\n  iManufacturer:\t0x1\n  iProduct:\t\t0x2\n  iSerialNumbers:\t0x3\n  bNumConfigurations:\t0x1\n\nThe clie_5_attach function of the visor driver, which is called during the driver initialization process, expects an OUT-Bulk-Endpoint. \nDue to an incomplete sanity check, the visor driver tries to dereference null-pointers. \nThis results in a crash of the system. \n\n****\n$ nm visor.ko.debug | grep clie_5_attach\n0000000000000030 t clie_5_attach\n$ addr2line -e visor.ko.debug 6d\n/usr/src/debug/kernel-3.10.0-229.14.1.el7/linux-3.10.0-229.14.1.el7.x86_64/drivers/usb/serial/visor.c:610\n****\n\n**** CentOS-Kernel linux-3.10.0-229.14.1.el7 (drivers/usb/serial/visor.c)\n        ...\n607\n608\tpipe = usb_sndbulkpipe(serial->dev, port->bulk_out_endpointAddress);\n609\tfor (j = 0; j < ARRAY_SIZE(port->write_urbs); ++j)\n610\t\tport->write_urbs[j]->pipe = pipe;  /* if there is no configured OUT-bulk-endpoint, the kernel tries to dereference null-pointers */\n611\n612\treturn 0;\n613 }\n        ...\n****\n\n\t[*] Configuration-Descriptor\n\t  bLength:\t\t0x9\n\t  bDescriptorType:\t0x2\n\t  wTotalLength:\t\t0x27\n\t  bNumInterfaces:\t0x1\n\t  bConfigurationValue:\t0x1\n\t  iConfiguration:\t0x0\n\t  bmAttributes:\t\t0x0\n\t  bMaxPower:\t\t0x31\n\t\t[*] Interface-Descriptor\n\t\t  bLength:\t\t0x9\n\t\t  bDescriptorType:\t0x4\n\t\t  bInterfaceNumber:\t0x0\n\t\t  bAlternateSetting:\t0x0\n\t\t  bNumEndpoints:\t0x3\n\t\t  bInterfaceClass:\t0x0\n\t\t  bInterfaceSubClass:\t0x0\n\t\t  bInterfaceProtocol:\t0x0\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x81  <-- IN-Direction\n\t\t\t  bmAttribut:\t\t0x1   <-- Interrupt-Transfer\n\t\t\t  wMaxPacketSize:\t0x404\n\t\t\t  bInterval:\t\t0xc\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x1   <-- OUT-Direction\n\t\t\t  bmAttribut:\t\t0x1   <-- Interrupt-Transfer (change this value to 0x2, which is the value for bulk-transfer without additional features, and the visor driver won't crash)\n\t\t\t  wMaxPacketSize:\t0x4\n\t\t\t  bInterval:\t\t0xc\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x82  <-- IN-Direction\n\t\t\t  bmAttribut:\t\t0x1   <-- Interrupt-Transfer\n\t\t\t  wMaxPacketSize:\t0x4\n\t\t\t  bInterval:\t\t0xc\n\nProof of Concept:\n1) The bug can be reproduced using USB-fuzzing framework vUSBf from Sergej Schumilo (github.com/schumilo). \nThe attached vUSBf-obj file contains the payload. Please let us know if you would like to use the Facedancer board. \nIn such case, we could also provide a patched version of vUSBf which allows to reproduce vUSBf-Payloads using the Facedancer board.\n2) For a proof of concept we are providing also an Arduino firmware file. Just flash it \non Arduino Leonardo and plug it into any RHEL machine. The Arduino will \nemulate the defective USB device.\n\n   avrdude -v -p ATMEGA32u4 -c avr109 -P /dev/ttyACM0 -b 57600 -U flash:w:binary.hex\n\nThe file binary.hex has been attached to this bug report.\nTo prevent automated sending of payloads, use a jumper to connect port D3 and \n5V!\n\n\nSeverity and Ease of Exploitation\nThe security weakness can be easily exploited. Using our Arduino firmware only \nphysical access to the system is required. \n\n\nAdditional info:\nStacktrace, vUSBf-Payload, Arduino-Firmware attached.\n\n\nPlease assign a CVE for this issue since this is a local DoS of the targeted system. \nCVSS 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C)",
        "Createdattachment 1096273[details]vUSBf Payload",
        "Createdattachment 1096276[details]Stacktrace",
        "Createdattachment 1096277[details]vUSBf Payload",
        "Proposed upstream patch:http://marc.info/?l=linux-usb&m=145260786729359&w=2http://article.gmane.org/gmane.linux.usb.general/136010",
        "Setting QA ack+, will probably have to rely on code review for this one, but will see if I can come up with a test case for it.",
        "this was fixed in the upstream commit cb3232138e37129e88240a98a1d2aba2187ff57c by adding endpoints number check required:\n\n[http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cb3232138e37129e88240a98a1d2aba2187ff57c]\n+\tif (serial->num_bulk_out < 2) {\n+\t\tdev_err(&serial->interface->dev, \"missing bulk out endpoints\\n\");\n+\t\treturn -ENODEV;\n+\t}",
        "Thank you for reporting this flaw.\n\nThe Product Security has rated this flaw as having low security impact (bz#1296466), so the patch currently is not planned to be added to the RHEL source trees. The upstream and Fedora patches are completed (at least, I hope so), so the patch may get to the RHEL trees at the next USB subsystem code rebase."
    ]
}