#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>
#include <stdint.h>

static int check_memset(void *source, int value, size_t count) {
    unsigned char *memory = (unsigned char *)source;
    unsigned char pattern = (unsigned char)value;

    for (size_t i = 0; i < count; i++) {
        if (memory[i] != pattern) {
            fprintf(stderr, "memset() did not set byte at offset %zu "
                    "(%p[%zu]=%u != %u)!\n", i, source, i, memory[i], pattern);
            return -1;
        }
    }
    return 0;
}

static void *real_memset(void *source, int value, size_t count) {
#define LIBRARY "libc.so.6"
#define SYMBOL "memset"

    void *handle;
    void *(*function)(void *, int, size_t);
    void *retval;

    handle = dlopen(LIBRARY, RTLD_LAZY);
    if (NULL == handle) {
        fprintf(stderr, "Could not load library %s: %s\n",
                LIBRARY, dlerror());
        abort();
    }
    
    dlerror();
    function = dlsym(handle, SYMBOL);
    if (NULL == function) {
        fprintf(stderr, "Could not find symbol %s: %s\n",
                SYMBOL, dlerror());
        abort();
    }

    retval = (*function)(source, value, count);
    if (check_memset(source, value, count)) {
        abort();
    }

    if (dlclose(handle)) {
        fprintf(stderr, "Could not unload library %s: %s\n",
                LIBRARY, dlerror());
        abort();
    }

    return retval;
#undef LIBRARY
#undef SYMBOL
}

void *memset(void *source, int value, size_t count) {
    fprintf(stderr, "Called: memset(source=%p, value=%d, count=%zu)\n",
            source, value, count);
    return real_memset(source, value, count);
}
