{
    "bugid": "1283374",
    "cveid": [
        "CVE-2016-2782"
    ],
    "summary": "CVE-2016-2782 Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid  USB device descriptors (visor driver) [local-DoS]",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 7",
    "hardware": "Unspecified",
    "os": "Unspecified",
    "url": "",
    "reported_date": "2015-11-18 20:24 UTC byRalf Spenneberg",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096281",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096282",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096284"
    ],
    "comment": [
        "Description of problem:\nLocal RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (visor driver) [local-DoS]\n\nVersion-Release number of selected component (if applicable):\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n\nHow reproducible:\nalways\n\nOpenSource Security Ralf Spenneberg\nAm Bahnhof 3-5\n48565 Steinfurt\ninfo\n\n\nDate: November 12th, 2015\nAuthors: Sergej Schumilo, Hendrik Schwartke, Ralf Spenneberg\nCVE: not yet assigned\nCVSS: 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C) \nTitle: Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (visor driver) [local-DoS]\nSeverity: Critical. The Kernel panics. A reboot is required.\nEase of Exploitation: Trivial\nVulnerability type: Wrong input validation\nProducts: RHEL 7.1 including all updates\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n(for debugging-purposes we used the CentOS Kernel kernel-debuginfo-3.10.0-229.14.1.el7)\n\n\nAbstract\nThe Kernel 3.10.0-229.20.1.el7.x86_64 crashes when presented a buggy USB \ndevice which requires the visor driver.\nDetailed product description\nWe confirmed the bug on the following system:\nRHEL 7.1\nKernel = 3.10.0-229.20.1.el7.x86_64\nFurther products or kernel versions have not been tested.\nHow reproducible: Always\nActual results: Kernel crashes \n\nDescription:\nThe bug was found using the USB-fuzzing framework vUSBf from Sergej Schumilo \n(github.com/schumilo) using the following device descriptor:\n\n ######### PAYLOAD 1 #########\n[*] Device-Descriptor\n  bLength:\t\t0x12\n  bDescriptorType:\t0x1\n  bcdUSB:\t\t0x200\n  bDeviceClass:\t\t0x3\n  bDeviceSubClass:\t0x0\n  bDeviceProtocol:\t0x0\n  bMaxPacketSize:\t0x40\n  idVendor:\t\t0x82d\n  idProduct:\t\t0x200\n  bcdDevice:\t\t0x100\n  iManufacturer:\t0x1\n  iProduct:\t\t0x2\n  iSerialNumbers:\t0x3\n  bNumConfigurations:\t0x1\n\nThe treo_attach function does not use the num_ports (struct usb_serial) value for any kind of sanity checks during the initialization process. Due to an incomplete sanity check, the driver could try to dereference a null-pointer if a malformed device-descriptor is presented (zero-value for bNumEndpoints or no required endpoint-descriptors is provided).\nThis results in a crash of the system. \n\n****\n$ nm visor.ko.debug | grep treo_attach\n00000000000005f0 t treo_attach\n$ addr2line -e visor.ko.debug 0x651\n/usr/src/debug/kernel-3.10.0-229.14.1.el7/linux-3.10.0-229.14.1.el7.x86_64/drivers/usb/serial/visor.c:577\n****\n\n**** CentOS-Kernel linux-3.10.0-229.14.1.el7 (drivers/usb/serial/visor.c)\n        ...\n554\t#define COPY_PORT(dest, src)\t\t\t\t\t\t\\\n555\tdo { \\\n556\t\tint i;\t\t\t\t\t\t\t\\\n557\t\t\t\t\t\t\t\t\t\\\n558\t\tfor (i = 0; i < ARRAY_SIZE(src->read_urbs); ++i) {\t\\\n559\t\t\tdest->read_urbs[i] = src->read_urbs[i];\t\t\\ /* Possible Nullpointer-Dereference */\n560\t\t\tdest->read_urbs[i]->context = dest;\t\t\\\n561\t\t\tdest->bulk_in_buffers[i] = src->bulk_in_buffers[i]; \\\n562\t\t}\t\t\t\t\t\t\t\\\n563\t\tdest->read_urb = src->read_urb;\t\t\t\t\\\n564\t\tdest->bulk_in_endpointAddress = src->bulk_in_endpointAddress;\\\n565\t\tdest->bulk_in_buffer = src->bulk_in_buffer;\t\t\\\n566\t\tdest->bulk_in_size = src->bulk_in_size;\t\t\t\\\n567\t\tdest->interrupt_in_urb = src->interrupt_in_urb;\t\t\\\n568\t\tdest->interrupt_in_urb->context = dest;\t\t\t\\\n569\t\tdest->interrupt_in_endpointAddress = \\\n570\t\t\t\t\tsrc->interrupt_in_endpointAddress;\\\n571\t\tdest->interrupt_in_buffer = src->interrupt_in_buffer;\t\\\n572\t} while (0);\n573\n574\tswap_port = kmalloc(sizeof(*swap_port), GFP_KERNEL);\n575\tif (!swap_port)\n576\t\treturn -ENOMEM;\n577\tCOPY_PORT(swap_port, serial->port[0]);        /* no sanity-check! */\n578\tCOPY_PORT(serial->port[0], serial->port[1]);  /* no sanity-check! */\n579\tCOPY_PORT(serial->port[1], swap_port);        /* no sanity-check! */\n        ...\n****\n\n\t[*] Configuration-Descriptor\n\t  bLength:\t\t0x9\n\t  bDescriptorType:\t0x2\n\t  wTotalLength:\t\t0x27\n\t  bNumInterfaces:\t0x1\n\t  bConfigurationValue:\t0x1\n\t  iConfiguration:\t0x0\n\t  bmAttributes:\t\t0x0\n\t  bMaxPower:\t\t0x31\n\t\t[*] Interface-Descriptor\n\t\t  bLength:\t\t0x9\n\t\t  bDescriptorType:\t0x4\n\t\t  bInterfaceNumber:\t0x0\n\t\t  bAlternateSetting:\t0x0\n\t\t  bNumEndpoints:\t0x3\n\t\t  bInterfaceClass:\t0x0\n\t\t  bInterfaceSubClass:\t0x0\n\t\t  bInterfaceProtocol:\t0x0\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x81 \n\t\t\t  bmAttribut:\t\t0x3  \n\t\t\t  wMaxPacketSize:\t0x404\n\t\t\t  bInterval:\t\t0xc\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x1  \n\t\t\t  bmAttribut:\t\t0x2   \n\t\t\t  wMaxPacketSize:\t0x4\n\t\t\t  bInterval:\t\t0xc\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x82 \n\t\t\t  bmAttribut:\t\t0x1   \n\t\t\t  wMaxPacketSize:\t0x4\n\t\t\t  bInterval:\t\t0xc\n\nProof of Concept:\n1) The bug can be reproduced using USB-fuzzing framework vUSBf from Sergej Schumilo (github.com/schumilo). \nThe attached vUSBf-obj file contains the payload. Please let us know if you would like to use the Facedancer board. \nIn such case, we could also provide a patched version of vUSBf which allows to reproduce vUSBf-Payloads using the Facedancer board.\n2) For a proof of concept we are providing also an Arduino firmware file. Just flash it \non Arduino Leonardo and plug it into any RHEL machine. The Arduino will \nemulate the defective USB device.\n\n   avrdude -v -p ATMEGA32u4 -c avr109 -P /dev/ttyACM0 -b 57600 -U flash:w:binary.hex\n\nThe file binary.hex has been attached to this bug report.\nTo prevent automated sending of payloads, use a jumper to connect port D3 and \n5V!\n\n\nSeverity and Ease of Exploitation\nThe security weakness can be easily exploited. Using our Arduino firmware only \nphysical access to the system is required. \n\n\nAdditional info:\nStacktrace, vUSBf-Payload, Arduino-Firmware attached.\n\n\nPlease assign a CVE for this issue since this is a local DoS of the targeted system. \nCVSS 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C)",
        "Createdattachment 1096281[details]vUSBf Payload",
        "Createdattachment 1096282[details]Stacktrace",
        "Createdattachment 1096284[details]Arduino firmware demonstrating the bug",
        "this was fixed by Johan Hovold <johan> in the upstream commit cac9b50b0d75a1d50d6c056ff65c005f3224c8e0 by adding endpoints number check required:\n\n[http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=cac9b50b0d75a1d50d6c056ff65c005f3224c8e0]\n+\tif (serial->num_bulk_in < 2 || serial->num_interrupt_in < 2) {\n+\t\tdev_err(&serial->interface->dev, \"missing endpoints\\n\");\n+\t\treturn -ENODEV;\n+\t}",
        "Thank you for reporting this flaw.\n\nThe Product Security has rated this flaw as having low security impact (bz#1312670), so the patch currently is not planned to be added to the RHEL source trees. The upstream and Fedora patches are completed (at least, I hope so), so the patch may get to the RHEL trees at the next USB subsystem code rebase.",
        "Public via:http://seclists.org/bugtraq/2016/Mar/86"
    ]
}