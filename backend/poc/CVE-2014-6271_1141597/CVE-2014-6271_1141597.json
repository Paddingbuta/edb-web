{
    "bugid": "1141597",
    "cveid": [
        "CVE-2014-6271"
    ],
    "summary": "CVE-2014-6271 bash: specially-crafted environment variables can be used to inject shell commands",
    "alias": "CVE-2014-6271",
    "product": "Security Response",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2014-09-15 02:24 UTC byWade Mealing",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=937490"
    ],
    "comment": [
        "A flaw was found in the bash functionality that evaluates specially formatted environment variables passed to it from another environment. \nAn attacker could use this feature to override or bypass restrictions to the environment to execute shell commands before restrictions have been applied.  Certain services and applications allow remote unauthenticated attackers to provide environment variables, allowing them to exploit this issue.\n\nAcknowledgements:\n\nRed Hat would like to thank Stephane Chazelas for reporting this issue.",
        "Createdattachment 937490[details]Proposed upstream patch",
        "Createdattachment 938968[details]funcdef-import-3.0.patch\n\nUpstream backport to bash 3.0",
        "Createdattachment 938969[details]funcdef-import-3.1.patch\n\nUpstream backport to bash 3.1",
        "Createdattachment 938971[details]funcdef-import-3.2.patch\n\nUpstream backport to bash 3.2",
        "Createdattachment 938973[details]funcdef-import-4.0.patch\n\nUpstream backport to bash 4.0",
        "Createdattachment 938975[details]funcdef-import-4.1.patch\n\nUpstream backport to bash 4.1",
        "Createdattachment 938976[details]funcdef-import-4.2.patch\n\nUpstream backport to bash 4.2",
        "IssueDescription:\n\nA flaw was found in the way Bash evaluated certain specially crafted environment variables. An attacker could use this flaw to override or bypass environment restrictions to execute shell commands. Certain services and applications allow remote unauthenticated attackers to provide environment variables, allowing them to exploit this issue.",
        "Public via:http://www.openwall.com/lists/oss-security/2014/09/24/10",
        "This issue has been addressed in the following products:\n\n  S-JIS for Red Hat Enterprise Linux 6\n  S-JIS for Red Hat Enterprise Linux 5\n\nVia RHSA-2014:1295https://rhn.redhat.com/errata/RHSA-2014-1295.html",
        "This issue has been addressed in the following products:\n\n  Red Hat Enterprise Linux 5.6 Long Life\n  Red Hat Enterprise Linux 5.9 EUS - Server Only\n  Red Hat Enterprise Linux 6.4 EUS - Server and Compute Node Only\n  Red Hat Enterprise Linux 6.2 AUS\n  Red Hat Enterprise Linux 4 Extended Lifecycle Support\n\nVia RHSA-2014:1294https://rhn.redhat.com/errata/RHSA-2014-1294.html",
        "External Reference:https://access.redhat.com/articles/1200223https://securityblog.redhat.com/2014/09/24/bash-specially-crafted-environment-variables-code-injection-attack",
        "This issue has been addressed in the following products:\n\n  Red Hat Enterprise Linux 6\n  Red Hat Enterprise Linux 5\n  Red Hat Enterprise Linux 7\n\nVia RHSA-2014:1293https://rhn.redhat.com/errata/RHSA-2014-1293.html",
        "This fix seems incomplete. You can for sure overwrite files at least, like this:\n\n$ ls -l date\nls: cannot access date: No such file or directory\n$\u00a0env -i \u00a0X='() { (a)=>\\' bash -c 'date'\nbash: X: line 1: syntax error near unexpected token `='\nbash: X: line 1: `'\nbash: error importing function definition for `X'\n$ ls -l date\n-rw-------. 1 taviso taviso 0 Sep 24 14:06 date\n\nWorse, the second token becomes the command.\n\n$ env -i \u00a0X='() { (a)=>\\' bash -c 'echo date'; cat echo\nbash: X: line 1: syntax error near unexpected token `='\nbash: X: line 1: `'\nbash: error importing function definition for `X'\nWed Sep 24 14:12:49 PDT 2014\n\nThis seems close to arbitrary code exec.",
        "(In reply to Tavis Ormandy fromcomment #23)> This fix seems incomplete. You can for sure overwrite files at least, like\n> this:\n> \n> $ ls -l date\n> ls: cannot access date: No such file or directory\n> $\u00a0env -i \u00a0X='() { (a)=>\\' bash -c 'date'\n> bash: X: line 1: syntax error near unexpected token `='\n> bash: X: line 1: `'\n> bash: error importing function definition for `X'\n> $ ls -l date\n> -rw-------. 1 taviso taviso 0 Sep 24 14:06 date\n> \n> Worse, the second token becomes the command.\n> \n> $ env -i \u00a0X='() { (a)=>\\' bash -c 'echo date'; cat echo\n> bash: X: line 1: syntax error near unexpected token `='\n> bash: X: line 1: `'\n> bash: error importing function definition for `X'\n> Wed Sep 24 14:12:49 PDT 2014\n> \n> This seems close to arbitrary code exec.Furthermore, subsequent tokens become arguments to the command:\n\n$ env -i  X='() { (a)=>\\' bash -c 'echo curl -shttps://bugzilla.redhat.com/'; head echo\nbash: X: line 1: syntax error near unexpected token `='\nbash: X: line 1: `'\nbash: error importing function definition for `X'\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\n                      \"http://www.w3.org/TR/html4/loose.dtd\">\n<html lang=\"en\">\n  <head>\n    <title>Red Hat Bugzilla Main Page</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">  \n    <meta name=\"verify-v1\" content=\"1hLjVPyIYh2cX7CL+s5A0k6pKt2FRq7/FSQ/cqGi9J8=\">\n    <meta name=\"y_key\" content=\"1cdf458efae704ba\">\n\n      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">",
        "(In reply to Wesley Hirsch fromcomment #24)> Furthermore, subsequent tokens become arguments to the command:\n> \n> $ env -i  X='() { (a)=>\\' bash -c 'echo curl -s\n>https://bugzilla.redhat.com/'; head echoI'm no expert, but didn't you forget to escape near \"bash -c 'echo curl\"?  The ' is ending the env -i function and executing native code - that's not a vulnerability.",
        "(In reply to iggyvolz fromcomment #25)> (In reply to Wesley Hirsch fromcomment #24)\n> > Furthermore, subsequent tokens become arguments to the command:\n> > \n> > $ env -i  X='() { (a)=>\\' bash -c 'echo curl -s\n> >https://bugzilla.redhat.com/'; head echo\n> I'm no expert, but didn't you forget to escape near \"bash -c 'echo curl\"? \n> The ' is ending the env -i function and executing native code - that's not a\n> vulnerability.No, he didn't, this is a vulnerability. You can execute env -i 'X=\\' env\n to convince yourself of this fact.",
        "Statement:\n\n(none)",
        "Bugs for Fedora are missing and the updates athttps://admin.fedoraproject.org/updates/bashlack links to the bugs.",
        "Just as a heads up: The second vulnerability seems also to work with zsh (zsh 4.3.10 (x86_64-redhat-linux-gnu) on CentOS 6.5 and zsh (zsh 4.3.9 (i386-apple-darwin10.0) on Mac.",
        "Just to let you know: The second vulnerability also work on zsh 5.0.2 (x86_64-apple-darwin13.0) on Mac.",
        "$ zsh --version\nzsh 5.0.2 (x86_64-apple-darwin13.0)\n\n$ bash --version\nGNU bash, version 3.2.51(1)-release (x86_64-apple-darwin13)\nCopyright (C) 2007 Free Software Foundation, Inc.\n\n$ env X='() { (a)=>\\' bash -c \"echo date\"; cat echo; rm echo\nbash: X: line 1: syntax error near unexpected token `='\nbash: X: line 1: `'\nbash: error importing function definition for `X'\nThu 25 Sep 2014 12:21:01 BST\n\n$ env X='() { (a)=>\\' zsh -c \"echo date\"; cat echo; rm echo\ndate\ncat: echo: No such file or directory\nrm: echo: No such file or directory\n\nOne of us us testing the vulnerability the wrong way.",
        "(In reply to Bj\u00f6rn Puttmann fromcomment #29)> Just as a heads up: The second vulnerability seems also to work with zsh\n> (zsh 4.3.10 (x86_64-redhat-linux-gnu) on CentOS 6.5 and zsh (zsh 4.3.9\n> (i386-apple-darwin10.0) on Mac.(In reply to ZendoQ fromcomment #30)> Just to let you know: The second vulnerability also work on zsh 5.0.2\n> (x86_64-apple-darwin13.0) on Mac.This is nonsense. The import of functions from the environment is a\nGNU bash-only feature. Neither zsh nor mksh support this.\n\nThe format GNU bash uses is that, if an imported variable begins\nwith \u201c() {\u201d, it\u2019s taken as function. For every other shell, these\nare just normal strings.",
        "You are absolutely correct. \nPlease ignore my previous post and sorry for this unnecessary noise.",
        "Would a better way to test for theCVE-2014-7169vulnerability be something like:\n\nexport X=\"() { (a)=>\\\\\"; bash -c '/dev/stdout date';\n\nThat way there are no files to clean up afterwards.  So if you wanted to test all of your servers you can run something like:\n\nfor ip in `cat ips.txt`; do \n\techo ======================\n\techo SERVER IP:$ip; \n\texport X=\"() { (a)=>\\\\\"; bash -c '/dev/stdout date'; ssh altroot@$ip echo \n\techo =========== if date output is above this line then the server is vulnerable ===========\ndone;\n\nThoughts?",
        "WARNING: The Fedora update to bash-4.2.47-4.fc20.x86_64 is snake oil.\n\nThis command:\n\n    env X='() { (a)=>\\' sh -c \"echo date\"; cat echo\n\nSTILL causes a file 'echo' to be created.\n\nWATCH OUT.",
        "[ruddo@machein ~]$ env X='() { (a)=>\\' sh -c \"echo date\"; cat echo\nsh: X: line 1: syntax error near unexpected token `='\nsh: X: line 1: `'\nsh: error importing function definition for `X'\nThu Sep 25 18:06:29 MST 2014\n\nTA DAAA.\n\nWTH people.",
        "The bash_ld_preload.c workaround trick that is posted in the customer portal is also not worth the effort.  This line of code in the patch can easily be subverted:\n\n    c = strstr(p,\"=() {\");\n\nAll the attacker must do is modify the variable \"shellcode\" a bit and bam, workaround workarounded.",
        "diff --git a/variables.c b/variables.c\nindex cdc54bc..1a98efa 100644\n--- a/variables.c\n+++ b/variables.c\n@@ -347,85 +347,25 @@ initialize_shell_variables (env, privmode)\n \n       temp_var = (SHELL_VAR *)NULL;\n \n-      /* If exported function, define it now.  Don't import functions from\n-\t the environment in privileged mode. */\n-      if (privmode == 0 && read_but_dont_execute == 0 && STREQN (\"() {\", string, 4))\n+      ro = 0;\n+      if (posixly_correct && STREQ (name, \"SHELLOPTS\"))\n \t{\n-\t  string_length = strlen (string);\n-\t  temp_string = (char *)xmalloc (3 + string_length + char_index);\n-\n-\t  strcpy (temp_string, name);\n-\t  temp_string[char_index] = ' ';\n-\t  strcpy (temp_string + char_index + 1, string);\n-\n-\t  if (posixly_correct == 0 || legal_identifier (name))\n-\t    parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST);\n-\n-\t  /* Ancient backwards compatibility.  Old versions of bash exported\n-\t     functions like name()=() {...} */\n-\t  if (name[char_index - 1] == ')' && name[char_index - 2] == '(')\n-\t    name[char_index - 2] = '\\0';\n-\n-\t  if (temp_var = find_function (name))\n-\t    {\n-\t      VSETATTR (temp_var, (att_exported|att_imported));\n-\t      array_needs_making = 1;\n-\t    }\n-\t  else\n-\t    {\n-\t      if (temp_var = bind_variable (name, string, 0))\n-\t\t{\n-\t\t  VSETATTR (temp_var, (att_exported | att_imported | att_invisible));\n-\t\t  array_needs_making = 1;\n-\t\t}\n-\t      last_command_exit_value = 1;\n-\t      report_error (_(\"error importing function definition for `%s'\"), name);\n-\t    }\n-\n-\t  /* ( */\n-\t  if (name[char_index - 1] == ')' && name[char_index - 2] == '\\0')\n-\t    name[char_index - 2] = '(';\t\t/* ) */\n+\t  temp_var = find_variable (\"SHELLOPTS\");\n+\t  ro = temp_var && readonly_p (temp_var);\n+\t  if (temp_var)\n+\t    VUNSETATTR (temp_var, att_readonly);\n \t}\n-#if defined (ARRAY_VARS)\n-#  if ARRAY_EXPORT\n-      /* Array variables may not yet be exported. */\n-      else if (*string == '(' && string[1] == '[' && string[strlen (string) - 1] == ')')\n+      temp_var = bind_variable (name, string, 0);\n+      if (temp_var)\n \t{\n-\t  string_length = 1;\n-\t  temp_string = extract_array_assignment_list (string, &string_length);\n-\t  temp_var = assign_array_from_string (name, temp_string);\n-\t  FREE (temp_string);\n-\t  VSETATTR (temp_var, (att_exported | att_imported));\n+\t  if (legal_identifier (name))\n+\t    VSETATTR (temp_var, (att_exported | att_imported));\n+\t  else\n+\t    VSETATTR (temp_var, (att_exported | att_imported | att_invisible));\n+\t  if (ro)\n+\t    VSETATTR (temp_var, att_readonly);\n \t  array_needs_making = 1;\n \t}\n-#  endif /* ARRAY_EXPORT */\n-#endif\n-#if 0\n-      else if (legal_identifier (name))\n-#else\n-      else\n-#endif\n-\t{\n-\t  ro = 0;\n-\t  if (posixly_correct && STREQ (name, \"SHELLOPTS\"))\n-\t    {\n-\t      temp_var = find_variable (\"SHELLOPTS\");\n-\t      ro = temp_var && readonly_p (temp_var);\n-\t      if (temp_var)\n-\t\tVUNSETATTR (temp_var, att_readonly);\n-\t    }\n-\t  temp_var = bind_variable (name, string, 0);\n-\t  if (temp_var)\n-\t    {\n-\t      if (legal_identifier (name))\n-\t\tVSETATTR (temp_var, (att_exported | att_imported));\n-\t      else\n-\t\tVSETATTR (temp_var, (att_exported | att_imported | att_invisible));\n-\t      if (ro)\n-\t\tVSETATTR (temp_var, att_readonly);\n-\t      array_needs_making = 1;\n-\t    }\n-\t}\n \n       name[char_index] = '=';\n       /* temp_var can be NULL if it was an exported function with a syntax",
        "https://pastebin.com/MPyZzMg8",
        "(In reply to Rudd-O DragonFear fromcomment #37)> The bash_ld_preload.c workaround trick that is posted in the customer portal\n> is also not worth the effort.  This line of code in the patch can easily be\n> subverted:\n> \n>     c = strstr(p,\"=() {\");\n> \n> All the attacker must do is modify the variable \"shellcode\" a bit and bam,\n> workaround workarounded.variables.c:\n\n     /* If exported function, define it now.  Don't import functions from\n         the environment in privileged mode. */\n      if (privmode == 0 && read_but_dont_execute == 0 && STREQN (\"() {\", string, 4))\n        {\n          string_length = strlen (string);\n\n$ env -i X=' () { }; echo hello' bash -c 'date' \nFri Sep 26 13:37:12 AEST 2014\n$ env -i X='( ) { }; echo hello' bash -c 'date' \nFri Sep 26 13:37:15 AEST 2014\n$ env -i X='()  { }; echo hello' bash -c 'date' \nFri Sep 26 13:37:19 AEST 2014\n$ env -i X='() { }; echo hello' bash -c 'date' \nbash: X: line 0: syntax error near unexpected token `}'\nbash: X: line 0: `X () { }; echo hello'\nbash: error importing function definition for `X'\nFri Sep 26 13:37:25 AEST 2014\n\nIt would be much appreciated if you can supply an example so that the work around code can be updated, or does the work around code seem correct to you?",
        "Examples:\nOn a server patched to 4.1.2-15.el6_5.1:\n\n    $ rpm -q bash\n    bash-4.1.2-15.el6_5.1.x86_64\n    $ env -i X='() { (a)=>\\' bash -c \"/dev/stdout echo vulnerable\"''\n    bash: X: line 1: syntax error near unexpected token `='\n    bash: X: line 1: `'\n    bash: error importing function definition for `X'\n    vulnerable\n\n\nOn a server patched to 4.1.2-15.el6_5.2:\n\n    $ rpm -q bash\n    bash-4.1.2-15.el6_5.2.x86_64\n    $ env -i X='() { (a)=>\\' bash -c \"echo Vulnerable\"''\n    Vulnerable",
        "(In reply to Colin van Niekerk fromcomment #41)>     $ env -i X='() { (a)=>\\' bash -c \"/dev/stdout echo vulnerable\"''>     $ env -i X='() { (a)=>\\' bash -c \"echo Vulnerable\"''You forgot something there.",
        "i would like to send special thanks only\ngood job man",
        "What is the best way to test before and after patch the server?\n\nBest Regards,\nF\u00e1bio Sbano",
        "(In reply to Fabio S. Sbano fromcomment #45)> What is the best way to test before and after patch the server?\n> \n> Best Regards,\n> F\u00e1bio SbanoAs non-root user run:\n\nenv X='() { (a)=>\\' sh -c \"echo date\"; cat echo\n\nIf a file called 'echo' is created in the current directory and it prints the date, bash is still vulnerable.",
        "(In reply to Fabio S. Sbano fromcomment #45)> What is the best way to test before and after patch the server?\n>Here's one way:\n\n$ cd /tmp && rm -f /tmp/echo && \\\n   env 'x=() { :;}; echo vulnerable' 'f=() { (a)=>\\' \\\n     bash -c 'echo echo vulnerable'; cat echo\n\nIf the output includes at least one line that says 'vulnerable', then the version of bash in your $PATH has not yet been fully patched (remember, there are at least 4 CVEs at play, and at least two rounds of patches, one for this bug, and a followon for the others).",
        "Eric, Thanks!\n\n#!/bin/sh\n# 2014-09-26 - Fabio Sbano\n\nenv x='() { :;}; echo vulnerable' bash -c \"echo :-)\" | grep \"vulnerable\" &>/dev/null\nif [ $? -eq 0 ]\nthen\n  echo 'the system is vulnerable'\n  echo 'doing update'\n  USERNAME=$( who am i | awk '{ print $1 }' )\n  if [ ${USERNAME} -eq \"root\" ]\n  then\n    yum update -y bash\n  else\n    sudo yum update -y bash\n  fi\n  env x='() { :;}; echo vulnerable' bash -c \"echo :-)\" | grep \"vulnerable\" &>/dev/null\n  [ $? -eq 1 ] && echo \"the system is secure now\"\nelse\n  echo \"the system is already protected\"\nfi",
        "(In reply to Fabio S. Sbano fromcomment #48)> Eric, Thanks!\n> \n> #!/bin/sh\n> # 2014-09-26 - Fabio Sbano\n> \n> env x='() { :;}; echo vulnerable' bash -c \"echo :-)\" | grep \"vulnerable\"This only tests if you are vulnerable toCVE-2014-6271.  But even if you have patched that, you may still be vulnerable to the weakerCVE-2014-7169,CVE-2014-7186, andCVE-2014-7187. My test incomment 47covers CVE-2014-7169; and while upstream bash has not yet released an official patch for the crashes of 7186 or 7187 yet, all Red Hat bash builds that have 7169 fixed have also included measures that prevent environment variables from triggering those other crashes.https://securityblog.redhat.com/2014/09/26/frequently-asked-questions-about-the-shellshock-bash-flaws/",
        "Okay!! I understood and will be wait for upstream\n\nRegards,\nFabio Sbano",
        "Can someone please updatehttps://securityblog.redhat.com/2014/09/26/frequently-asked-questions-about-the-shellshock-bash-flaws/and/orhttps://access.redhat.com/articles/1200223to mention that:\n\nRed Hat/Fedora builds that include the fix forCVE-2014-7169are also immune to CVE-2014-7186/CVE-2014-7187, but people building upstream bash are not yet immune (because Red Hat has added patches that are not yet officially upstream)\n\nand give pointers of how to test whether bash is still vulnerable to shellshock attacks, such as using some of the test scripts in this mail for exposing whether a shell is vulnerable to CVE-2014-7186:https://lists.gnu.org/archive/html/bug-bash/2014-09/msg00238.htmlI'm worried that people will be lulled into a false sense of security (\"I've applied both upstream bash patches, therefore I must be secure\") when in reality they are still vulnerable to ShellShock until either the entire bash parser is audited to be bug-free (difficult) or until bash is fixed to avoid ever calling the bash parser on arbitrary contents of normal environment variables (easy, as done in the Red Hat patch).",
        "bash-4.3.22-3.fc21 has been pushed to the Fedora 21 stable repository.  If problems still persist, please make note of it in this bug report.",
        "(In reply to Eric Blake fromcomment #51)> Red Hat/Fedora builds that include the fix forCVE-2014-7169are also immune\n> to CVE-2014-7186/CVE-2014-7187, but people building upstream bash are not\n> yet immune (because Red Hat has added patches that are not yet officially\n> upstream)How about CVE-2014-6277?\n\nSeehttp://lcamtuf.blogspot.de/2014/09/bash-bug-apply-unofficial-patch-now.htmlIt seems to be recommended at this stage to kill the feature from orbit.\n\nSeehttp://www.openwall.com/lists/oss-security/2014/09/25/13",
        "(In reply to Peter Backes fromcomment #53)> (In reply to Eric Blake fromcomment #51)\n> > Red Hat/Fedora builds that include the fix forCVE-2014-7169are also immune\n> > to CVE-2014-7186/CVE-2014-7187, but people building upstream bash are not\n> > yet immune (because Red Hat has added patches that are not yet officially\n> > upstream)\n> \n> How about CVE-2014-6277?Yes, that is one of the CVEs that Red Hat builds are already immune to, by virtue of moving the function exports out of the regular variable namespace.> \n> See\n> \n>http://lcamtuf.blogspot.de/2014/09/bash-bug-apply-unofficial-patch-now.htmlThat blog is recommending that other distros and upstream bash follow Red Hat's lead.> \n> It seems to be recommended at this stage to kill the feature from orbit.\n> \n> Seehttp://www.openwall.com/lists/oss-security/2014/09/25/13That is the patch Red Hat used to avoid ALL parser bugs becoming Shell Shock exploit avenues.  You do NOT need to kill function exporting, only kill the confusion of a regular variable being mistaken for a function export, which Red Hat has done.",
        "Thanks Eric for clarification",
        "(In reply to Eric Blake fromcomment #47)> (In reply to Fabio S. Sbano fromcomment #45)\n> > What is the best way to test before and after patch the server?\n> > \n> \n> Here's one way:\n> \n> $ cd /tmp && rm -f /tmp/echo && \\\n>    env 'x=() { :;}; echo vulnerable' 'f=() { (a)=>\\' \\\n>      bash -c 'echo echo vulnerable'; cat echo\n> \n> If the output includes at least one line that says 'vulnerable', then the\n> version of bash in your $PATH has not yet been fully patched (remember,\n> there are at least 4 CVEs at play, and at least two rounds of patches, one\n> for this bug, and a followon for the others).Eric,\n\nI'm testing upstream bash 4.3.27, built from source, and your method fromcomment #47still includes 'vulnerable' in the output. However, none of the individual tests I can find for the CVEs I'm aware of seem to fail on their own - so I am a bit confused.\n\nAs far as I can tell I am passing everything from [https://access.redhat.com/articles/1200223], and also clear of the tests in your message at [https://lists.gnu.org/archive/html/bug-bash/2014-09/msg00238.html]\n\nHere is the console output of running the test fromcomment #47:> testuser@ip-xxx-xx-xx-xxx:~$ bash --version\n> GNU bash, version 4.3.27(1)-release (x86_64-unknown-linux-gnu)\n> Copyright (C) 2013 Free Software Foundation, Inc.\n> License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\n> \n> This is free software; you are free to change and redistribute it.\n> There is NO WARRANTY, to the extent permitted by law.\n> testuser@ip-xxx-xx-xx-xxx:~$ cd /tmp && rm -f /tmp/echo && \\\n> >      env 'x=() { :;}; echo vulnerable' 'f=() { (a)=>\\' \\\n> >      bash -c 'echo echo vulnerable'; cat echo\n> echo vulnerable\n> cat: echo: No such file or directory\n> testuser@ip-xxx-xx-xx-xxx:/tmp$I'm wondering if I'm simply failing to make a distinction between a line that says 'echo vulnerable' and a line that literally just says 'vulnerable'.(?)\n\nThank you,\nMark",
        "(In reply to Mark Casey fromcomment #56)> > $ cd /tmp && rm -f /tmp/echo && \\\n> >    env 'x=() { :;}; echo vulnerable' 'f=() { (a)=>\\' \\\n> >      bash -c 'echo echo vulnerable'; cat echo\n> > \n> > If the output includes at least one line that says 'vulnerable',on a line by itself (and not as part of a larger line)> > then the\n> > version of bash in your $PATH has not yet been fully patched (remember,\n> > there are at least 4 CVEs at play, and at least two rounds of patches, one\n> > for this bug, and a followon for the others).\n>> > testuser@ip-xxx-xx-xx-xxx:~$ cd /tmp && rm -f /tmp/echo && \\\n> > >      env 'x=() { :;}; echo vulnerable' 'f=() { (a)=>\\' \\\n> > >      bash -c 'echo echo vulnerable'; cat echo\n> > echo vulnerableThis is NOT \"vulnerable\" on a line by itself, so you have a working bash.",
        "This issue has been addressed in the following products:\n\n  RHEV Manager version 3.4\n\nVia RHSA-2014:1354https://rhn.redhat.com/errata/RHSA-2014-1354.html"
    ]
}