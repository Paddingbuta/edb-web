{
    "bugid": "981942",
    "cveid": [
        "CVE-2013-7424"
    ],
    "summary": "CVE-2013-7424 glibc: ping6 with idn causes crash",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 6",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2013-07-07 08:04 UTC byChris Hills",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=770465"
    ],
    "comment": [
        "Description of problem:\nWhen supplying an internationalized domain name to ping6 it causes a crash in ping6.\n\nVersion-Release number of selected component (if applicable):\niputils-20071127-17.el6_4.x86_64\n\nHow reproducible:\nEvery time, on both x86_64 and x86.\n\nSteps to Reproduce:\n1. Open a terminal.\n2. Enter the command `ping6 \u0ba4\u0bb3\u0bae\u0bcd.\u0baa\u0bbe\u0bb0\u0bbe\u0bb3\u0bc1\u0bae\u0ba9\u0bcd\u0bb1\u0bae\u0bcd.\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8.`\n\nActual results:\nping6 crashes\n\nExpected results:\nping6 does not crash.\n\nAdditional info:\n# ping6 \u0ba4\u0bb3\u0bae\u0bcd.\u0baa\u0bbe\u0bb0\u0bbe\u0bb3\u0bc1\u0bae\u0ba9\u0bcd\u0bb1\u0bae\u0bcd.\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8.\n*** glibc detected *** ping6: munmap_chunk(): invalid pointer: 0xbfb787a6 ***\n======= Backtrace: =========\n/lib/libc.so.6(+0x390e31)[0xde7e31]\n/lib/libc.so.6(+0x3e6c86)[0xe3dc86]\n/lib/libc.so.6(getaddrinfo+0x15b)[0xe403db]\nping6(main+0x5da)[0xbb8aba]\n/lib/libc.so.6(__libc_start_main+0xe6)[0xd8dce6]\nping6(+0x1551)[0xbb7551]\n======= Memory map: ========\n001fa000-00217000 r-xp 00000000 fd:01 16845      /lib/libgcc_s-4.4.7-20120601.so.1\n00217000-00218000 rw-p 0001d000 fd:01 16845      /lib/libgcc_s-4.4.7-20120601.so.1\n002c8000-002dd000 r-xp 00000000 fd:01 19806      /lib/libresolv-2.12.so\n002dd000-002de000 ---p 00015000 fd:01 19806      /lib/libresolv-2.12.so\n002de000-002df000 r--p 00015000 fd:01 19806      /lib/libresolv-2.12.so\n002df000-002e0000 rw-p 00016000 fd:01 19806      /lib/libresolv-2.12.so\n002e0000-002e2000 rw-p 00000000 00:00 0\n00676000-00694000 r-xp 00000000 fd:01 30540      /lib/ld-2.12.so\n00694000-00695000 r--p 0001d000 fd:01 30540      /lib/ld-2.12.so\n00695000-00696000 rw-p 0001e000 fd:01 30540      /lib/ld-2.12.so\n006d1000-006d6000 r-xp 00000000 fd:01 8399       /lib/libnss_dns-2.12.so\n006d6000-006d7000 r--p 00004000 fd:01 8399       /lib/libnss_dns-2.12.so\n006d7000-006d8000 rw-p 00005000 fd:01 8399       /lib/libnss_dns-2.12.so\n007a9000-007d6000 r-xp 00000000 fd:01 8387       /lib/libcidn-2.12.so\n007d6000-007d7000 r--p 0002c000 fd:01 8387       /lib/libcidn-2.12.so\n007d7000-007d8000 rw-p 0002d000 fd:01 8387       /lib/libcidn-2.12.so\n00bb6000-00bbe000 r-xp 00000000 fd:01 18000      /bin/ping6\n00bbe000-00bbf000 rw-p 00007000 fd:01 18000      /bin/ping6\n00bbf000-00be1000 rw-p 00000000 00:00 0\n00caa000-00cb6000 r-xp 00000000 fd:01 8401       /lib/libnss_files-2.12.so\n00cb6000-00cb7000 r--p 0000b000 fd:01 8401       /lib/libnss_files-2.12.so\n00cb7000-00cb8000 rw-p 0000c000 fd:01 8401       /lib/libnss_files-2.12.so\n00d77000-00f07000 r-xp 00000000 fd:01 30541      /lib/libc-2.12.so\n00f07000-00f08000 ---p 00190000 fd:01 30541      /lib/libc-2.12.so\n00f08000-00f0a000 r--p 00190000 fd:01 30541      /lib/libc-2.12.so\n00f0a000-00f0b000 rw-p 00192000 fd:01 30541      /lib/libc-2.12.so\n00f0b000-00f0e000 rw-p 00000000 00:00 0\n00fcf000-00fd0000 r-xp 00000000 00:00 0          [vdso]\n02860000-02881000 rw-p 00000000 00:00 0          [heap]\nb75b2000-b77b2000 r--p 00000000 fd:01 8359       /usr/lib/locale/locale-archive\nb77b2000-b77b3000 rw-p 00000000 00:00 0\nb77b8000-b77ba000 rw-p 00000000 00:00 0\nbfb64000-bfb79000 rw-p 00000000 00:00 0          [stack]\nAborted (core dumped)",
        "Createdattachment 770465[details]full backtrace during the crash\n\nThe respective code from ping6.c:\n\nstruct addrinfo hints, *ai;\nint gai;\n...\nmemset(&hints, 0, sizeof(hints));\nhints.ai_family = AF_INET6;\nhints.ai_flags = AI_IDN;\ngai = getaddrinfo(target, NULL, &hints, &ai); // <--- crash here\nif (gai) {\n\tfprintf(stderr, \"unknown host\\n\");\n\texit(2);\n}",
        "Switching to glibc.",
        "(gdb) bt\n#0  0x00007ff8cc255895 in raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64\n#1  0x00007ff8cc257075 in abort () at abort.c:92\n#2  0x00007ff8cc2937a7 in __libc_message (do_abort=2, fmt=0x7ff8cc37af80 \"*** glibc detected *** %s: %s: 0x%s ***\\n\")\n    at ../sysdeps/unix/sysv/linux/libc_fatal.c:198\n#3  0x00007ff8cc2990d6 in malloc_printerr (action=3, str=0x7ff8cc37afb0 \"munmap_chunk(): invalid pointer\", \n    ptr=<value optimized out>) at malloc.c:6311\n#4  0x00007ff8cc2f3252 in gaih_inet (\n    name=0x7fff88db2536 \"\u0ba4\u0bb3\u0bae\u0bcd.\u0baa\u0bbe\u0bb0\u0bbe\u0bb3\u0bc1\u0bae\u0ba9\u0bcd\u0bb1\u0bae\u0bcd.\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8.\", \n    service=<value optimized out>, req=<value optimized out>, pai=<value optimized out>, naddrs=0x7fff88db1d48)\n    at ../sysdeps/posix/getaddrinfo.c:1250\n#5  0x00007ff8cc2f5da0 in getaddrinfo (\n    name=0x7fff88db2536 \"\u0ba4\u0bb3\u0bae\u0bcd.\u0baa\u0bbe\u0bb0\u0bbe\u0bb3\u0bc1\u0bae\u0ba9\u0bcd\u0bb1\u0bae\u0bcd.\u0b87\u0bb2\u0b99\u0bcd\u0b95\u0bc8.\", \n    service=<value optimized out>, hints=0x7fff88db1dc0, pai=0x7fff88db1e18) at ../sysdeps/posix/getaddrinfo.c:2361\n#6  0x00007ff8cc7db2f5 in main ()\n\n\nThe problem is like this:\n\n* In gaih_inet we pass this IDN to __idna_to_ascii_lz to get back a canonicalized name we can use.\n* If the output string of __idna_to_ascii_lz (second argument) has a different pointer value from the IDN then we assume a string has been allocated that we need to free.\n* Later we free name (the static string).\n\nThe disconnect is that we did not assign `name' to the new value `p' which needs to be freed.\n\nThe upstream code is this:\n~~~\n          /* In case the output string is the same as the input string\n             no new string has been allocated.  */\n          if (p != name)\n            {\n              name = p;\n              malloc_name = true;\n            }\n~~~\n\nThe rhel-6.5 code is this:\n~~~\n 432           /* In case the output string is the same as the input string\n 433              no new string has been allocated.  */\n 434           if (p != name)\n 435             malloc_name = true;\n~~~\n\nThe upstream fix is this:\n\ncommit 2e96f1c73b06e81da59ef7fffa426dc201875f31\nAuthor: Andreas Schwab <schwab>\nDate:   Thu Aug 4 15:42:10 2011 -0400\n\n    Fix encoding name for IDN in getaddrinfo\n\n~~~\ndiff --git a/ChangeLog b/ChangeLog\nindex fbacbd5..0392853 100644\n--- a/ChangeLog\n+++ b/ChangeLog\n@@ -1,3 +1,8 @@\n+2011-07-26  Andreas Schwab  <schwab>\n+\n+       * sysdeps/posix/getaddrinfo.c (gaih_inet): Don't discard result of\n+       encoding to ACE if AI_IDN.\n+\n 2011-08-01  Jakub Jelinek  <jakub>\n \n        * sysdeps/ieee754/dbl-64/k_rem_pio2.c (__kernel_rem_pio2): Fix up fq\ndiff --git a/sysdeps/posix/getaddrinfo.c b/sysdeps/posix/getaddrinfo.c\nindex 6d574c5..a5aafe9 100644\n--- a/sysdeps/posix/getaddrinfo.c\n+++ b/sysdeps/posix/getaddrinfo.c\n@@ -432,7 +432,10 @@ gaih_inet (const char *name, const struct gaih_service *service,\n          /* In case the output string is the same as the input string\n             no new string has been allocated.  */\n          if (p != name)\n-           malloc_name = true;\n+           {\n+             name = p;\n+             malloc_name = true;\n+           }\n        }\n #endif\n~~~\n\nAccording tohttp://sourceware.org/glibc/wiki/Glibc%20Timeline, that fixed happened in the 2.15 development cycle which would not have been in rhel-6.5 which uses 2.12.\n\nThis fix needs backporting to correct this issue.\n\nMoving to rhel-6.6.",
        "Since the problem described in this bug report should be\nresolved in a recent advisory, it has been closed with a\nresolution of ERRATA.\n\nFor information on the advisory, and where to find the updated\nfiles, follow the link below.\n\nIf the solution does not work for you, open a new bug report.http://rhn.redhat.com/errata/RHSA-2014-1391.html"
    ]
}