#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>

/**
 * Just POSIX lock a file and pause forever
 *
 * argv[1] - file system path to lock
 */
int main(int argc, char **argv)
{
	struct flock fl;
	int fd;

	if (argc < 2) {
		fprintf(stderr, "usage:\n%s <path>\n", argv[0]);
		exit(1);
	}

	fd = open(argv[1], O_RDWR);
	if (fd < 0) {
		perror("open");
		exit(1);
	}

	fl.l_type = F_WRLCK;
	fl.l_whence = SEEK_SET;
	fl.l_start = 0; /* may as well lock it all */
	fl.l_len = 0;

	if(fcntl(fd, F_SETLKW, &fl) == -1) {
		perror("fcntl");
		fprintf(stderr, "%s (%d) does not hold the lock - exiting\n",
			argv[0], getpid());
		exit(1);
	}
	pause();
	exit(0);
}
