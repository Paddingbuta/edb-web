Reporter: kittymore83@gmail.com
========================
begin report

Issue details:

Issue code:
https://android.googlesource.com/platform/external/libcups/+/refs/tags/android-10.0.0_r21/cups/ipp.c#3454

In above code, there's no check of the length of buffer readed with the new `n` value. So, access to uninitialized buffer may happen and which may lead to UB.

- Steps to reproduce the vulnerability (including sample code if
appropriate).
1. push ipp.c attached(just add some log) to external/libcups/cups/ and compile testipp command according to Android.mk attached, then push it to phone, run command as below(poc.ipp attached):
# CUPS_DEBUG_LOG="-" CUPS_DEBUG_LEVEL=2 ./testipp poc.ipp

You can see the issue clearly from log output

sargo:/data/local/tmp # CUPS_DEBUG_LOG="-" CUPS_DEBUG_LEVEL=2 ./testipp poc.ipp
T001 07:02:13.530  cupsFileOpen(filename="poc.ipp", mode="r")
T001 07:02:13.530  cupsFileOpenFd(fd=3, mode="r")
T001 07:02:13.530  ippNew()
T001 07:02:13.530  _cupsSetDefaults()
T001 07:02:13.530  cupsFileOpen(filename="/etc/cups/client.conf", mode="r")
T001 07:02:13.530  cupsFileOpen(filename="//.cups/client.conf", mode="r")
T001 07:02:13.530  ippNew: Returning 0x782f635000
T001 07:02:13.530  ippReadIO(src=0x782f61c000, cb=0x7830348c14, blocking=1, parent=0x0, ipp=0x782f635000)
T001 07:02:13.531  ippReadIO: ipp->state=0
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=8)
T001 07:02:13.531  ippReadIO: version=1.222
T001 07:02:13.531  ippReadIO: op_status=ad04
T001 07:02:13.531  ippReadIO: request_id=84281096
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=1)
T001 07:02:13.531  ippReadIO: ipp->current=0x0, ipp->prev=0x0
T001 07:02:13.531  ippReadIO: value tag=49(mimeMediaType)
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=2)
T001 07:02:13.531  ippReadIO: name length=2
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=2)
T001 07:02:13.531  cupsArrayAdd(a=0x782f645000, e=0x782f605010)
T001 07:02:13.531  ippReadIO: name="aa", ipp->current=0x782f606060, ipp->prev=0x0
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=2)
T001 07:02:13.531  ippReadIO: value length=41
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=41)
T001 07:02:13.531  cupsArrayAdd(a=0x782f645000, e=0x782f64d000)
T001 07:02:13.531  ippReadIO: value="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=1)
T001 07:02:13.531  ippReadIO: ipp->current=0x782f606060, ipp->prev=0x0
T001 07:02:13.531  ippReadIO: value tag=35(textWithLanguage)
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=2)
T001 07:02:13.531  ippReadIO: name length=3
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=3)
T001 07:02:13.531  cupsArrayAdd(a=0x782f645000, e=0x782f605020)
T001 07:02:13.531  ippReadIO: name="abc", ipp->current=0x782f606090, ipp->prev=0x782f606060
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=2)
T001 07:02:13.531  ippReadIO: value length=4
T001 07:02:13.531  cupsFileRead(fp=0x782f61c000, buf=0x782f63a051, bytes=4)
T001 07:02:13.531  ippReadIO:read buf:    <<<---added by me
T001 07:02:13.531  bufptr[0]=0x00
T001 07:02:13.531  bufptr[1]=0x3F
T001 07:02:13.531  bufptr[2]=0xAA
T001 07:02:13.531  bufptr[3]=0xBB
T001 07:02:13.531  bufptr[4]=0x61        <<<----content from bufptr[4] is junk data from previous
T001 07:02:13.531  bufptr[5]=0x61
T001 07:02:13.532  bufptr[6]=0x61
T001 07:02:13.532  bufptr[7]=0x61
T001 07:02:13.532  bufptr[8]=0x61
T001 07:02:13.532  bufptr[9]=0x61


- What happened.
Access to uninitialized buffer happen in libcups

- The build fingerprint of the device that you used to confirm the
vulnerability ('adb shell getprop ro.build.fingerprint')
Android/aosp_sargo/sargo:10/QQ1A.200105.002/eng.jack.20200128.163332:userdebug/test-keys

========================
