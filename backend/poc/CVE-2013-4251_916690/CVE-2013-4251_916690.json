{
    "bugid": "916690",
    "cveid": [
        "CVE-2013-4251"
    ],
    "summary": "CVE-2013-4251 scipy: weave /tmp and current directory issues",
    "alias": "CVE-2013-4251",
    "product": "Security Response",
    "hardware": "Unspecified",
    "os": "Unspecified",
    "url": "",
    "reported_date": "2013-02-28 16:45 UTC byFlorian Weimer",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=788882"
    ],
    "comment": [
        "I think it would be a good idea to remove the fallback to the current directory in the weave code (which happens if ~/.python26_compiled is not a writable directory).  This looks unsafe when the current directory is not trusted.",
        "I'm sorry, but I'm a bit puzzled by this one. You are talking about build_dir, right? Current routine sets it to current dir:\n\n    build_dir = configure_build_dir(module_dir)\n\nwhich is a bug IMO, because argument 'build_dir' is completely ignored -- I'm gonna report it to upstream. But back to the routine that is trying to set build_dir if it's not specified:\n\n 1. if build_dir is not writable, it is set to current dir\n 2. if current dir is not writable either, '/tmp' is used then\n\nSo you don't like 1., right?",
        "(In reply tocomment #2)> I'm sorry, but I'm a bit puzzled by this one. You are talking about\n> build_dir, right? Current routine sets it to current dir:\n> \n>     build_dir = configure_build_dir(module_dir)\n> \n> which is a bug IMO, because argument 'build_dir' is completely ignored --\n> I'm gonna report it to upstream. But back to the routine that is trying to\n> set build_dir if it's not specified:\n> \n>  1. if build_dir is not writable, it is set to current dir\n>  2. if current dir is not writable either, '/tmp' is used then\n> \n> So you don't like 1., right?I don't like 1.  2 doesn't look great, either, unless a private subdirectory of /tmp is created exactly for this purposes.  I haven't tested the second scenario.",
        "Okay, I'll fix them both. It is really easy. Brew builds will be done by Monday (March 4th) for sure (if you want to test it).",
        "Here [1] is a build of scipy with these changes:\n- Use argument build_dir if it is specified, fallback to module path\n- Do not fall for current dir if build_dir is not specified\n- Create temp dir (mkdtemp) when building extension if build_dir is not specified (last fallback)\n\nTests that test this fall now (I haven't updated them yet).\n\nIs this behaviour okay or should I change it somehow?\n\n[1]https://brewweb.devel.redhat.com/taskinfo?taskID=5461629",
        "(In reply tocomment #5)> Here [1] is a build of scipy with these changes:\n> - Use argument build_dir if it is specified, fallback to module path\n> - Do not fall for current dir if build_dir is not specified\n> - Create temp dir (mkdtemp) when building extension if build_dir is not\n> specified (last fallback)This is good, but I think you have to clean up the directory created with mkdtemp, otherwise it will stick around.",
        "But what will be the purpose of the execution if the actual result will be deleted? (I think in that case there should be a way to inform the user where is his extension stored)",
        "(In reply tocomment #7)> But what will be the purpose of the execution if the actual result will be\n> deleted? (I think in that case there should be a way to inform the user\n> where is his extension stored)If you use os.mkdtemp(), you won't be able to find the directory again, so the data cached there will not be reused.  Perhaps it's best to just error out in this case, simply requiring a writable home directory?  That part is hard to tell for me.",
        "I found out that it could be traceable, because if 'build_dir' is not on sys.path, build_extension adds it there. But it's not very nice, since /tmp is tmpfs, thus not permanent storage.\n\nAlso, answer to comment (https://bugzilla.redhat.com/show_bug.cgi?id=916695#c8) from #916695 would help me in here.",
        "Tomas, I answered your question onbug 916695.\n\nDuring testing, I noticed this:\n\n[fweimer@localhost ~]$ ls -lhd /tmp/fweimer\ndrwxr-xr-x. 2 nobody nobody 4.0K Aug 14 09:45 /tmp/fweimer\n[fweimer@localhost ~]$ python\nPython 2.7.5 (default, Aug  5 2013, 02:37:08) \n[GCC 4.8.1 20130717 (Red Hat 4.8.1-5)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> import random, scipy.weave; a=1; scipy.weave.inline('printf(\"%%d\\\\n\",a,%f);' % random.random(),['a'])Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.7/site-packages/scipy/weave/inline_tools.py\", line 357, in inline\n    **kw)\n  File \"/usr/lib64/python2.7/site-packages/scipy/weave/inline_tools.py\", line 484, in compile_function\n    verbose=verbose, **kw)\n  File \"/usr/lib64/python2.7/site-packages/scipy/weave/ext_tools.py\", line 365, in compile\n    temp = catalog.intermediate_dir()\n  File \"/usr/lib64/python2.7/site-packages/scipy/weave/catalog.py\", line 220, in intermediate_dir\n    os.makedirs(path, mode=0o700)\n  File \"/usr/lib64/python2.7/os.py\", line 157, in makedirs\n    mkdir(name, mode)\nOSError: [Errno 13] Permission denied: '/tmp/fweimer/python27_intermediate'>>>So this is at least a denial of service.  With laxer permissions, weave uses that directory:\n\n[fweimer@localhost ~]$ ls -lhd /tmp/fweimer\ndrwxrwxrwx. 2 nobody nobody 4.0K Aug 14 09:45 /tmp/fweimer\n[fweimer@localhost ~]$ python\nPython 2.7.5 (default, Aug  5 2013, 02:37:08) \n[GCC 4.8.1 20130717 (Red Hat 4.8.1-5)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.>>> import random, scipy.weave; a=1; scipy.weave.inline('printf(\"%%d\\\\n\",a,%f);' % random.random(),['a'])creating /tmp/fweimer/python27_intermediate/compiler_ddba75e443dd3a9a304e5ced64620fbc\nIn file included from /usr/lib64/python2.7/site-packages/numpy/core/include/numpy/ndarraytypes.h:1728:0,\n                 from /usr/lib64/python2.7/site-packages/numpy/core/include/numpy/ndarrayobject.h:17,\n                 from /usr/lib64/python2.7/site-packages/numpy/core/include/numpy/arrayobject.h:15,\n                 from /home/fweimer/.python27_compiled/sc_a35dbf436a57cecf7066976e9761bd000.cpp:22:\n/usr/lib64/python2.7/site-packages/numpy/core/include/numpy/npy_deprecated_api.h:11:2: warning: #warning \"Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\" [-Wcpp]\n #warning \"Using deprecated NumPy API, disable it by #defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\"\n  ^\n/home/fweimer/.python27_compiled/sc_a35dbf436a57cecf7066976e9761bd000.cpp: In function \u2018PyObject* compiled_func(PyObject*, PyObject*)\u2019:\n/home/fweimer/.python27_compiled/sc_a35dbf436a57cecf7066976e9761bd000.cpp:673:29: warning: too many arguments for format [-Wformat-extra-args]\n     printf(\"%d\\n\",a,0.946759);        /*I would like to fill in changed locals and globals here...*/   \n                             ^\n1>>>[fweimer@localhost ~]$ find /tmp/fweimer -type f \n/tmp/fweimer/python27_intermediate/compiler_ddba75e443dd3a9a304e5ced64620fbc/home/fweimer/.python27_compiled/sc_777337fffcbda13be8e1c5a8c5ce3aef0.o\n/tmp/fweimer/python27_intermediate/compiler_ddba75e443dd3a9a304e5ced64620fbc/home/fweimer/.python27_compiled/sc_a35dbf436a57cecf7066976e9761bd000.o\n/tmp/fweimer/python27_intermediate/compiler_ddba75e443dd3a9a304e5ced64620fbc/usr/lib64/python2.7/site-packages/scipy/weave/scxx/weave_imp.o\n\nThe files are actually used as linker input files, so this allows local users to trick each other into executing code.\n\nThis is much more severe, not merely hardening, and probably warrants CVE assignment.  This should be fixed in cooperation with upstream, perhaps with a (short) embargo period.  Please do not commit a fix to a public repository or file a public bug report.",
        "To summarize, scipy.weave will use /tmp/[username] as persistent storage (cache), but it does not check whether or not this directory already exists, does not check whether it is a directory or a symlink, and also does not verify permissions or ownership, which could allow someone to place code in this directory that would be executed as the user running scipy.weave.\n\nIdeally, it should be creating the directory if it doesn't exist with appropriate ownership/permissions, and if the directory already exists (and permissions/ownership is inappropriate), create a new directory and use it instead (in a similar way that Pulseaudio does, perhaps /var/tmp/scipy-[variable]).",
        "Acknowledgements:\n\nThis issue was found by Florian Weimer of the Red Hat Product Security Team.",
        "(In reply to Vincent Danen fromcomment #11)> To summarize, scipy.weave will use /tmp/[username] as persistent storage\n> (cache), but it does not check whether or not this directory already existsI would like to correct this a little bit. scipy does check whether the dir exists. This is the function that is responsible for creating the directory:\n\n\ndef intermediate_dir():\n    \"\"\" Location in temp dir for storing .cpp and .o  files during\n        builds.\n    \"\"\"\n    python_name = \"python%d%d_intermediate\" % tuple(sys.version_info[:2])\n    path = os.path.join(tempfile.gettempdir(),\"%s\" % whoami(),python_name)\n    if not os.path.exists(path):\n        os.makedirs(path, mode=0o700)\n    return path\n\n\nAs you can see, it checks if the directory already exists.\n\nCurrently I'm writing tests for this CVE. When I finish I'll attach them here so it will be pretty easy to fix this. Is this okay?",
        "Createdattachment 788882[details]Unit tests for this CVE\n\nI've mocked unit tests for this CVE. These are definitely not final. Especially a part, where the tests play with actual temporary directory (/tmp/<name>/python27...) and not with one created only for purpose of the tests, is really bad. They were created to fit current code only. Also I wanted to know if the tests check correct values.\n\nOnce there will be code which fixes this bug, the tests will be easy to adapt.",
        "Createdattachment 789545[details]Patch",
        "Createdattachment 789580[details]catalog reproducer\n\nWhile writing the patch I noticed that same thing occurs for persistent cache/store of compiled functions -- catalog. We agreed with Florian that it should be fixed too, so I'm going to \"respin\" the patch.",
        "Thanks, Tomas.  Have we reported this upstream or gotten any feedback on it from them yet?",
        "As I wrote in the e-mail to your mailing list, I haven't got response yet. This may be because there was an event taking place recently -- EuroSciPy. So I'm assuming they were pretty busy and that's why they didn't respond.",
        "Createdattachment 791020[details]Patch 2\n\nThis patch fixes original issue and similar problem with function 'default_dir'. I will post a build of scipy here tomorrow.",
        "Any response from upstream yet?",
        "(In reply to Vincent Danen fromcomment #22)> Any response from upstream yet?Unfortunately no. I'm assuming they have problems with verification if the patch works. Especially on Windows environment. I may write them this week if no response come til Friday.",
        "Createdattachment 804078[details]patch from upstream",
        "The CRD date for this is October 10th.",
        "SciPy 0.12.1 has been released to fix this issue:http://sourceforge.net/projects/scipy/files/scipy/0.12.1/https://github.com/scipy/scipy/commit/bd296e0336420b840fcd2faabb97084fd252a973",
        "Created scipy tracking bugs for this issue:\n\nAffects: fedora-all [bug 1018351]\nAffects: epel-5 [bug 1018353]",
        "This is also correct in SciPy 0.13.0rc1:\n\nsourceforge.net/projects/scipy/files/scipy/0.13.0rc1/",
        "scipy-0.12.1-1.fc18 has been pushed to the Fedora 18 stable repository.  If problems still persist, please make note of it in this bug report.",
        "scipy-0.12.1-1.fc19 has been pushed to the Fedora 19 stable repository.  If problems still persist, please make note of it in this bug report.",
        "scipy-0.6.0-7.el5 has been pushed to the Fedora EPEL 5 stable repository.  If problems still persist, please make note of it in this bug report.",
        "scipy-0.12.1-1.fc20 has been pushed to the Fedora 20 stable repository.  If problems still persist, please make note of it in this bug report."
    ]
}