#include <stdio.h>
#include <sys/mman.h>
#include <pthread.h>

void *mmap_thread(void *unused){
	int *addr;
	while (1){
		addr = (int *)mmap(NULL, getpagesize(), PROT_READ|PROT_WRITE,
			MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
		if (addr == MAP_FAILED){
			perror ("mmap");
			exit(1);
		}

		addr[0] = rand();

		munmap(addr, getpagesize());
	}
}

void *mincore_thread(void *unused){
	unsigned char *vec;

	while(1){
		vec = (unsigned char *)mmap(NULL, getpagesize(), PROT_READ|PROT_WRITE,
			MAP_SHARED|MAP_ANONYMOUS, -1, 0);
		if (vec == MAP_FAILED){
			perror ("mmap in mincore_thread");
			exit(1);
		}

		if (mincore((void *)vec, getpagesize(), vec) < 0){
			perror ("mincore");
		}

		munmap (vec, getpagesize());
	}
}


		
main(){
	pthread_t mmap_thread_handle;
	pthread_t mincore_thread_handle;


	pthread_create(&mmap_thread_handle, NULL, mmap_thread, NULL);
	pthread_create(&mincore_thread_handle, NULL, mincore_thread, NULL);

	pthread_join(mincore_thread_handle, NULL);
}

