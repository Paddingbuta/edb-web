{
    "bugid": "1283370",
    "cveid": [
        "CVE-2016-3136"
    ],
    "summary": "CVE-2016-3136 Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid  USB device descriptors (mct_u232 driver) [local-DoS]",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 7",
    "hardware": "Unspecified",
    "os": "Unspecified",
    "url": "",
    "reported_date": "2015-11-18 20:12 UTC byRalf Spenneberg",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096272",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096274",
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=1096275"
    ],
    "comment": [
        "Description of problem:\n\nLocal RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (mct_u232 driver) [local-DoS]\n\n\nVersion-Release number of selected component (if applicable):\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n\nHow reproducible:\nalways\n\nOpenSource Security Ralf Spenneberg\nAm Bahnhof 3-5\n48565 Steinfurt\ninfo\n\n\nDate: November 12th, 2015\nAuthors: Sergej Schumilo, Hendrik Schwartke, Ralf Spenneberg\nCVE: not yet assigned\nCVSS: 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C) \nTitle: Local RedHat Enterprise Linux DoS \u2013 RHEL 7.1 Kernel crashes on invalid \nUSB device descriptors (mct_u232 driver) [local-DoS]\nSeverity: Critical. The Kernel panics. A reboot is required.\nEase of Exploitation: Trivial\nVulnerability type: Wrong input validation\nProducts: RHEL 7.1 including all updates\nKernel-Version: 3.10.0-229.20.1.el7.x86_64 \n(for debugging-purposes we used the CentOS Kernel kernel-debuginfo-3.10.0-229.14.1.el7)\n\n\nAbstract\nThe Kernel 3.10.0-229.20.1.el7.x86_64 crashes when presented a buggy USB \ndevice which requires the mct_u232 driver.\nDetailed product description\nWe confirmed the bug on the following system:\nRHEL 7.1\nKernel = 3.10.0-229.20.1.el7.x86_64\nFurther products or kernel versions have not been tested.\nHow reproducible: Always\nActual results: Kernel crashes \n\nDescription:\nThe bug was found using the USB-fuzzing framework vUSBf from Sergej Schumilo \n(github.com/schumilo) using the following device descriptor:\n\n ######### PAYLOAD 1 #########\n[*] Device-Descriptor\n  bLength:\t\t0x12\n  bDescriptorType:\t0x1\n  bcdUSB:\t\t0x200\n  bDeviceClass:\t\t0x3\n  bDeviceSubClass:\t0x0\n  bDeviceProtocol:\t0x0\n  bMaxPacketSize:\t0x40\n  idVendor:\t\t0x50d\n  idProduct:\t\t0x109\n  bcdDevice:\t\t0x100\n  iManufacturer:\t0x1\n  iProduct:\t\t0x2\n  iSerialNumbers:\t0x3\n  bNumConfigurations:\t0x1\n\nThis is the configuration descriptor containing only one interrupt-endpoint-descriptor (IN-direction).\nThe mct_u232 driver assumes that there will be at least two endpoint-descriptors configured as interrupt-in.\nSince there is no sanity check, it is possible that the kernel tries to dereference a null-pointer.\nThis results in a crash of the system. \n\n****\n$ nm mct_u232.ko.debug | grep mct_u232_port_probe\n0000000000000fc0 t mct_u232_port_probe\n$ addr2line -e mct_u232.ko.debug 0xFF9\n/usr/src/debug/kernel-3.10.0-229.14.1.el7/linux-3.10.0-229.14.1.el7.x86_64/drivers/usb/serial/mct_u232.c:386\n****\n\n**** CentOS-Kernel linux-3.10.0-229.14.1.el7 (drivers/usb/serial/mct_u232.c)\n        ...\n377 static int mct_u232_port_probe(struct usb_serial_port *port)\n378 {\n379\tstruct mct_u232_private *priv;\n380\n381\tpriv = kzalloc(sizeof(*priv), GFP_KERNEL);\n382\tif (!priv)\n383\t\treturn -ENOMEM;\n384\n385\t/* Use second interrupt-in endpoint for reading. */\n386\tpriv->read_urb = port->serial->port[1]->interrupt_in_urb; /* missing sanity check -> possible null-pointer dereference */\n387\tpriv->read_urb->context = port;\n388\n389\tspin_lock_init(&priv->lock);\n390\n391\tusb_set_serial_port_data(port, priv);\n392\n393\treturn 0;\n395 }\n        ...\n****\n\n\t[*] Configuration-Descriptor\n\t  bLength:\t\t0x9\n\t  bDescriptorType:\t0x2\n\t  wTotalLength:\t\t0x27\n\t  bNumInterfaces:\t0x1\n\t  bConfigurationValue:\t0x1\n\t  iConfiguration:\t0x0\n\t  bmAttributes:\t\t0x0\n\t  bMaxPower:\t\t0x31\n\t\t[*] Interface-Descriptor\n\t\t  bLength:\t\t0x9\n\t\t  bDescriptorType:\t0x4\n\t\t  bInterfaceNumber:\t0x0\n\t\t  bAlternateSetting:\t0x0\n\t\t  bNumEndpoints:\t0x3\n\t\t  bInterfaceClass:\t0x0\n\t\t  bInterfaceSubClass:\t0x0\n\t\t  bInterfaceProtocol:\t0x0\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x81  <-- IN-Direction\n\t\t\t  bmAttribut:\t\t0x3   <-- Interrupt-Transfer\n\t\t\t  wMaxPacketSize:\t0x404\n\t\t\t  bInterval:\t\t0xc\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x1   <-- OUT-Direction\n\t\t\t  bmAttribut:\t\t0x2   <-- Bulk-Transfer\n\t\t\t  wMaxPacketSize:\t0x4\n\t\t\t  bInterval:\t\t0xc\n\t\t\t[*] Endpoint-Descriptor\n\t\t\t  bLength:\t\t0x7\n\t\t\t  bDescriptorType:\t0x5\n\t\t\t  bEndpointAddress:\t0x82  <-- IN-Direction\n\t\t\t  bmAttribut:\t\t0x1   <-- Bulk-Transfer\n\t\t\t  wMaxPacketSize:\t0x4\n\t\t\t  bInterval:\t\t0xc\n\nProof of Concept:\n1) The bug can be reproduced using USB-fuzzing framework vUSBf from Sergej Schumilo (github.com/schumilo). \nThe attached vUSBf-obj file contains the payload. Please let us know if you would like to use the Facedancer board. \nIn such case, we could also provide a patched version of vUSBf which allows to reproduce vUSBf-Payloads using the Facedancer board.\n2) For a proof of concept we are providing also an Arduino firmware file. Just flash it \non Arduino Leonardo and plug it into any RHEL machine. The Arduino will \nemulate the defective USB device.\n\n   avrdude -v -p ATMEGA32u4 -c avr109 -P /dev/ttyACM0 -b 57600 -U flash:w:binary.hex\n\nThe file binary.hex has been attached to this bug report.\nTo prevent automated sending of payloads, use a jumper to connect port D3 and \n5V!\n\n\nSeverity and Ease of Exploitation\nThe security weakness can be easily exploited. Using our Arduino firmware only \nphysical access to the system is required. \n\n\nAdditional info:\nStacktrace, vUSBf-Payload, Arduino-Firmware attached.\n\n\nPlease assign a CVE for this issue since this is a local DoS of the targeted system. \nCVSS 4.9 (AV:L/AC:L/Au:N/C:N/I:N/A:C)",
        "Createdattachment 1096272[details]vUSBf Payload",
        "Createdattachment 1096274[details]Stacktrace",
        "Createdattachment 1096275[details]Arduino firmware demonstrating the bug",
        "Public via:http://seclists.org/bugtraq/2016/Mar/57",
        "CVEID was requested at:http://seclists.org/oss-sec/2016/q1/603",
        "CVE-2016-3136was assigned to this flaw, please, use it in the related communications, seehttp://seclists.org/oss-sec/2016/q1/620.",
        "Patch was sent upstream forCVE-2016-3136, many thanks to Oliver Neukum:http://marc.info/?l=linux-usb&m=145813478817704&w=2",
        "Thank you for reporting this flaw. The Product Security has rated this flaw as having low security impact (bz#1317007), so the patch is currently not planned to be added to the RHEL source trees. If accepted in the upstream, the patch may get to the RHEL trees later at the next USB subsystem code rebase."
    ]
}