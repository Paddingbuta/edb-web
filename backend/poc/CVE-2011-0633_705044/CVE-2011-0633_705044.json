{
    "bugid": "705044",
    "cveid": [
        "CVE-2011-0633"
    ],
    "summary": "CVE-2011-0633 perl-libwww-perl: no hostname check against SSL certificate name by default",
    "alias": "CVE-2011-0633",
    "product": "Security Response",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2011-05-16 13:35 UTC byJan Lieskovsky",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=523559"
    ],
    "comment": [
        "Common Vulnerabilities and Exposures assigned an identifierCVE-2011-0633to\nthe following vulnerability:\n\nThe Net::HTTPS module in libwww-perl (LWP) before 6.00, as used in\nWWW::Mechanize, LWP::UserAgent, and other products, when running in\nenvironments that do not set the If-SSL-Cert-Subject header, does not\nenable full validation of SSL certificates by default, which allows\nremote attackers to spoof servers via man-in-the-middle (MITM) attacks\ninvolving hostnames that are not properly validated. NOTE: it could be\nargued that this is a design limitation of the Net::HTTPS API, and\nseparate implementations should be independently assigned CVE\nidentifiers for not working around this limitation. However, because\nthis API was modified within LWP, a single CVE identifier has been\nassigned.\n\nReferences:\n[1]http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-0633[2]http://cpansearch.perl.org/src/GAAS/libwww-perl-6.00/Changes[3]http://vttynotes.blogspot.com/2010/12/man-in-middle-fun-with-perl-lwp.html[4]http://vttynotes.blogspot.com/2011/03/quick-note-on-lwp-and-perl-security-cve.html",
        "Public PoC from [3]:\n====================\n\n#!/usr/bin/perl\nrequire LWP::UserAgent;\nmy $ua = LWP::UserAgent->new;\n# If no If-SSL-Cert-Subject header exists, no hostname validation is on\n# Here's a certificate check that can by bypassed by anyone. Think attacker.domain.combinationlockfactory.com\n#$ua->default_header(\"If-SSL-Cert-Subject\"=>'domain.com');\n# Any of the following lines will validatehttps://www.godaddy.com...\n#$ua->default_header(\"If-SSL-Cert-Subject\"=>'Domain Control Validated');\n#$ua->default_header(\"If-SSL-Cert-Subject\"=>'www.Go');\n#$ua->default_header(\"If-SSL-Cert-Subject\"=>'www.GoDaddy.com');\n$ua->timeout(10);\nmy $response = $ua->get('https://www.godaddy.com/');\nif ($response->is_success) { print $response->content; } else { die $response->status_line; }",
        "This issue affects the versions of the perl-libwww-perl package,\nas shipped with Red Hat Enterprise Linux 5 and 6.\n\n--\n\nThis issue affects the versions of the perl-libwww-perl package,\nas shipped with Fedora release of 13 and 14.",
        "Created perl-libwww-perl tracking bugs for this issue\n\nAffects: fedora-all [bug 705050]",
        "I arranged test with certificate issued for different name, and even perl-libwww-perl-6.02-3.fc16.noarch in F17 does not check hostname by default.\n\nPrivate key (authority and server) (evil.key):\n\n-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAxwEKZHck9pJGh7S45uruYWjIa2aAuIa24XwFioeblZW8S0o+\nFjtkgsSs3EnuBHS/wOhyOZNUxK74lAQ67X5UEupwnG/6g32DP9d08GI6qiwLHHes\nYI2m866qBEg/0M/tomrobw625c2lHCb2SwLPHpH0o8mRSEPCtUFesjkn0OBDWGpz\n+JNYPbx4gn502Lpy/SHM6nr+U5fgVve01PhitzfnGgbm3/MI4bzPHGmuuqXQHq5m\nPWVqrU9lmttyTsxWfsw7NJk/OMojqA7PfVszUIP324CRNT8Mr5Wa3KqBJtDCtnbj\nBC2SNJzC0pw5tiU6u68PNF1fpdrPHPGDJZ6FmwIDAQABAoIBABaoLiw5CmrORZxu\nvXyA8+oAOY1Mysv3fnvWmHTospSJyznRNpdmZK+kv7+G5UP5nNlUPakDdqu79g44\nGxNuBhlvOqn878snr5lFqQkzTdWRFSTFFUma5w6obK/3H9jgy3/p5xO526X3T1yQ\nrQrmQ3mKCY3aRaGyIUlsq2DkM/3KTzU3bZiMixycV8d2mNGSIweO8TWc0eRxOxYj\n5/s1pEhcU5Up04lmqTs+0G9pcoLJBHuknREwaillICGRadNr4dfQ0u7ASmLTx1PJ\ntiKwrxb1JU8DZmNt6bZuwVfY8dDVtki61K+s2UbDGGJkUwvO4iUd6JBwHLmNi5Ij\nwQn7VV0CgYEA1QRjT9Tuiiqr1wtTQthR5Ge3iFJqdIinuBtUwhyTqZWtO2Dcf8Sd\nFJMpL7zWCYjnSmSyfv+9C/8G9c2/zo43YMNSgU3lxteWrFJQ5end9GEiXhQQLxHh\nl3MJtsNQ1/1LD3sG1NhnHrPQCJsAvFxot2QOtfZ9j3cYXcSF4kVWKvcCgYEA7yjL\nFsJjivofoLM/s+Q1JAvNBL4Chc3IFS2woihgExK7wJ48X8G61jQfW9g2ewmD8mnR\nD4tIkNkFzo6pyZEkVHz+A9F9esb91c3BRwEQC+C0tMrUFwplBLCMPeaHLw/6WSM2\nF6hIc40AShyMFjqaXA7WRt/PEIqhiSZaDkxLDX0CgYEAjcrl8HXkcsQErpgzTAOC\nP29qk6uIgRmVys8mlC9Be1jOfv/yxnmxtchfWg9wydf/XV26Ex9YT2vqziOu0WeJ\nJTfe64NWuA05lmsUvnX18H3XypfAThSw/YbtqGJKpftMw3k5CuUhfyZiC9hhnQBG\nFAzeXfE9kwnLhl8SX5OXz/ECgYALpugmJrhk2ATcdn8/C3pPVEfb2EoVLM53wa8e\nZ2su4rXFD7CPVcf9kbKJbgJRgkgscl1eLYIOlJRE2QyKpoinmSNjGjzL05Agb5Lg\nG7wlaABF4q/so3QCg3uBtI6Xi2a+GwoSov9Mqez+r19f4eENZSepclQLUUXHgdfX\nZH4vnQKBgE2GlH7L6ELgJk0EDACf11LjzxVpvxgF6ptG+HNHcfCstg3O0kK2GM/s\nD15KiCyECP7C3aQubwkMUzxXe0AZ1tlhvhFWr2UZLcbiYPoi8IpVolSXXHbux37v\nh4OS1EWq5uQ0NEu+hYXT4P27xMdxBHQvxsB0lcCwpyc5mV3tCGIJ\n-----END RSA PRIVATE KEY-----\n\nCertificate (authority and server, both CN and SubjectAltName are set to \"evil\") (evil.cert):\n\n-----BEGIN CERTIFICATE-----\nMIIDBTCCAe2gAwIBAgIETl3a2zANBgkqhkiG9w0BAQUFADAPMQ0wCwYDVQQDEwRl\ndmlsMB4XDTExMDgzMTA2NTUyNVoXDTE3MDQwOTA2NTUyN1owDzENMAsGA1UEAxME\nZXZpbDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMcBCmR3JPaSRoe0\nuObq7mFoyGtmgLiGtuF8BYqHm5WVvEtKPhY7ZILErNxJ7gR0v8DocjmTVMSu+JQE\nOu1+VBLqcJxv+oN9gz/XdPBiOqosCxx3rGCNpvOuqgRIP9DP7aJq6G8OtuXNpRwm\n9ksCzx6R9KPJkUhDwrVBXrI5J9DgQ1hqc/iTWD28eIJ+dNi6cv0hzOp6/lOX4Fb3\ntNT4Yrc35xoG5t/zCOG8zxxprrql0B6uZj1laq1PZZrbck7MVn7MOzSZPzjKI6gO\nz31bM1CD99uAkTU/DK+VmtyqgSbQwrZ24wQtkjScwtKcObYlOruvDzRdX6Xazxzx\ngyWehZsCAwEAAaNpMGcwDwYDVR0TAQH/BAUwAwEB/zAPBgNVHREECDAGggRldmls\nMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA8GA1UdDwEB/wQFAwMHpAAwHQYDVR0OBBYE\nFGJjr3FfRfHs8cVw7QQ2QhdIjQ7bMA0GCSqGSIb3DQEBBQUAA4IBAQCKkRa3p0qZ\nXFyG+zv9skgVz0/5I/rYe7bf5VdN4KB7MPkSiEDIWjap2ayxOxQ3TF0JI4oGvvBl\n9UzP3pg9AOGyzJ8BEto+lrZVe+jzPD5kIiaHWYf+oexHhRaO/V6Nw5YGC3uKjJhS\nk3gvHL2ep5uc8wM3wAB83/MW9zqdqCNCLrZiqZ8zTXbJnIX44LwE4dHH8z5/bDfC\nctEWy88m7brJdOMS1scmAVUjoPJ9XosMVJJKzIJFxSoFKXGz0OUuYqRPSODSe643\nbhHbZ1Rlj7Gn8E+SV9uylvV/eytm4buk/1ybZaT+gp54SDJIvK+m6mwxEHk2GVE1\nPUcgdFkhpwWA\n-----END CERTIFICATE-----\n\nRun HTTPS server as:\n\n$ gnutls-serv --x509keyfile evil.key --x509certfile evil.cert --port 6666 --disable-client-cert --http\n\nAnd check clients now:\n\nWget verifies hostname:\n\n$ wget -O /dev/nullhttps://localhost:6666/--ca-certificate=evil.cert\n--2011-08-31 09:49:43--https://localhost:6666/Resolving localhost... ::1, 127.0.0.1\nConnecting to localhost|::1|:6666... failed: Connection refused.\nConnecting to localhost|127.0.0.1|:6666... connected.\nERROR: no certificate subject alternative name matches\n        requested host name \u201clocalhost\u201d.\nTo connect to localhost insecurely, use \u2018--no-check-certificate\u2019.\n\nLWP::UserAgent (perl-libwww-perl-6.02-3.fc16) does not by default:\n\n$ HTTPS_CA_FILE=evil.cert perl -MLWP::UserAgent -le 'my $ua=LWP::UserAgent->new; print $ua->get(q{https://localhost:6666/})->status_line'\n200 OK\n\nExplicitly requested verification works:\n\n$ PERL_LWP_SSL_VERIFY_HOSTNAME=1 HTTPS_CA_FILE=evil.cert perl -MLWP::UserAgent -le 'my $ua=LWP::UserAgent->new; print $ua->get(q{https://localhost:6666/})->status_line'\n500 Can't connect to localhost:6666 (certificate verify failed)\n\nLWP::UserAgent documentation says:> \"verify_hostname\" => $bool\n>     When TRUE LWP will for secure protocol schemes ensure it\n>     connects to servers that have a valid certificate matching the\n>     expected hostname.  If FALSE no checks are made and you can't\n>     be sure that you communicate with the expected peer.  The no\n>     checks behaviour was the default for libwww-perl-5.837 and\n>     earlier releases.>>     This option is initialized from the\n>     PERL_LWP_SSL_VERIFY_HOSTNAME environment variable.  If this\n>     envirionment variable isn't set; then \"verify_hostname\"\n>     defaults to 1.So libwww-perl 6.02 conflicts with its own documentation and does not fix this problem. It still requires application modification.\n\nAlso if I understand this problem correctly, libwww-perl before 6.00 has no way how to enable hostname verfification in general. One can explicitly compare hostname against arbitrary string only.",
        "The original report and CVE assignment sounds somewhat odd to me.  There's a long post about LWP not checking connection hostname against SSL certificate hostname by default, but it does not mention that there's no SSL certificate checking at all, so any check configured using If-SSL-Cert-Subject header can be bypassed by a MITM attacker that generates (self-signed) certificate with expected subject (and issuer).\n\n(In reply tocomment #5)> I arranged test with certificate issued for different name, and even\n> perl-libwww-perl-6.02-3.fc16.noarch in F17 does not check hostname by default.My testing shows it does.  Both certificate and name verification is done by default.> $ HTTPS_CA_FILE=evil.certIf you look into LWP/UserAgent.pm, you should see that the use of HTTPS_CA_FILE or HTTPS_CA_DIR environment variable disabled name verification, reportedly for Crypt::SSLeay compatibility.  PERL_LWP_SSL_CA_FILE / PERL_LWP_SSL_CA_PATH can be used instead.> Also if I understand this problem correctly, libwww-perl before 6.00 has no\n> way how to enable hostname verfification in general. One can explicitly\n> compare hostname against arbitrary string only.Right, there does not seem to be an LWP-way to enable SSL certificate and hostname check in pre-6.00.  With sufficiently recent IO::Socket::SSL, it can be asked directly to do the checks (LWP fix seems to add LWP config options that are translated to IO::Socket::SSL options).  Hostname checking got added to IO::Socket::SSL in version 1.14 (seebug #509819, comment #2), hence only available in RHEL-6 and later.  I'm going to attach an example that enables checks with 5.x LWP.\n\nI'm quite hesitant to push such change to released products, as it's quite likely to break scripts in use.  We can consider adding LWP options that can be used to enable checks, but they are not too likely to get used if we divert from new upstream defaults and keep old no-checks default.",
        "Createdattachment 523559[details]Enable SSL checks using IO::Socket::SSL::set_ctx_defaults",
        "Petr, what do you think, would it make sense to backport support for setting SSL options via LWP UserAgent object without enabling them by default?  Enabling SSL checking by default rather tricky change for already released product, especially if we don't rebase to upstream 6.x.",
        "I see code before version 6 is unfortunate giving no easy way how to check certificate name. Even if I think the default behavior should be to check to resolve this vulnerability, I will try to back-port the ssl_opts and environment variables handling. I think the environment variable override could allow to enable names check selectively without touching existing applications.",
        "Createdattachment 527625[details]Back-port ssl_opts to libwww-perl-5.837\n\nThis back-ports changes from libwww-perl-6 to support ssl_opts and all the control environment variables. The CA file defaults to standard NSS bundle.\n\nThis patch keeps verification enabled by default as libwww-perl-6 does. Default state can be implemented by patch on top of this one.\n\nThis patch does not provide support for old IO::Socket::SSL. This will be solved in separate patch.",
        "(In reply tocomment #1)> Public PoC from [3]:[...]> # Any of the following lines will validatehttps://www.godaddy.com...\n> #$ua->default_header(\"If-SSL-Cert-Subject\"=>'Domain Control Validated');\n> #$ua->default_header(\"If-SSL-Cert-Subject\"=>'www.Go');\n> #$ua->default_header(\"If-SSL-Cert-Subject\"=>'www.GoDaddy.com');[...]> my $response = $ua->get('https://www.godaddy.com/');The <https://www.godaddy.com/> test is wrong because RFC 2459 (Internet X.509 Public Key Infrastructure Certificate and CRL Profile) says the host name comparison is case-insensitive. Thus conforming code should accept certificate for `www.GoDaddy.com' when connecting to <https://www.godaddy.com/>.\n\nI can see the point this test exhibits. I want just note I discourage to use _this domain name and with this certificate_ as test case for this vulnerability.",
        "Createdattachment 527957[details]Disable hostname verification by default\n\nThis patch restores default behavior of libwww-perl before version 6.",
        "Thank you, Petr.  As we can't flip this default for released product, I have filed RFE bug to add ssl_opts support -bug #745800.  I'm also closing this wontfix for released products.  Future products using LWP 6 or later will use new upstream default.",
        "perl-libwww-perl-5.837-4.fc15 has been pushed to the Fedora 15 stable repository.  If problems still persist, please make note of it in this bug report.",
        "perl-libwww-perl-5.837-3.fc14 has been pushed to the Fedora 14 stable repository.  If problems still persist, please make note of it in this bug report.",
        "Since perl-libwww-perl.noarch 0:5.837-3.fc14 has been published the VMWaare Command line interface script I used to use to manage ESX servers are no longer working. I tried to re-issue self signed certificates to make sure the server name matched, but I still get no connectivity. I had to downgrade perl-libwww-perl to get my code to work again.",
        "Yannick, what you describe does not sound surprising, given that the update enabled all SSL certificate checks by default (there's no point in only checking hostname, if you don't check the cert is properly signed by the CA you trust).  Hence those scripts need to be told which CA to trust, or disable the checks if you want to use the old insecure way.  Default trusted CA list is ca-bundle.crt from ca-certificates, but adding self-signed server certificate there is not the best idea.  Comments above hint some environment variables you can use to change LWP's SSL checking behaviour without modifying scripts.  You can try these two first:\n\nPERL_LWP_SSL_CA_FILE=/path/to/you/server.crt - to check against correct issuing certificate\n\nPERL_LWP_SSL_VERIFY_HOSTNAME=0 - to disable checks",
        "(In reply tocomment #19)> Yannick, what you describe does not sound surprising, given that the update\n> enabled all SSL certificate checks by default (there's no point in only\n> checking hostname, if you don't check the cert is properly signed by the CA you\n> trust).  Hence those scripts need to be told which CA to trust, or disable the\n> checks if you want to use the old insecure way.  Default trusted CA list is\n> ca-bundle.crt from ca-certificates, but adding self-signed server certificate\n> there is not the best idea.  Comments above hint some environment variables you\n> can use to change LWP's SSL checking behaviour without modifying scripts.  You\n> can try these two first:\n> \n> PERL_LWP_SSL_CA_FILE=/path/to/you/server.crt - to check against correct issuing\n> certificate\n> \n> PERL_LWP_SSL_VERIFY_HOSTNAME=0 - to disable checksAh fair enough. Yeah, I added the environment setting and that worked. Thanks for that Tomas. I know self signed certs are not secure, but these servers are not accessible from the outside so the risk is acceptable.\n\nThanks again as this was becoming a pain having to downgrade after each general update.\nYannick"
    ]
}