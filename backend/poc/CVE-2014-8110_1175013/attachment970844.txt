1. Cross-Site Scripting

Description:

Several instances of cross-site scripting vulnerabilities were identified to be present in the web based administration console.

	Method: POST
		/admin/createDestination.action
			Affected Parameter: JMSDestination
			PoC: a"><script>alert(0)</script><

The following two issues were reported and improperly fixed in AMQ-2613.

	Method: GET
		/admin/connection.jsp
			Affected Parameter: connectionID
			PoC: </title><script>alert(0)</script>
		/admin/browse.jsp
			Affected Parameter: JMSDestination
			PoC: </title><script>alert(0)</script>
	
Cause:

The root cause of this issue is improper user data output validation. 

Affected Versions: Apache ActiveMQ 5.10.0

2. XML External Entity Data Parsing

Description:

It is possible for a consumer dequeuing XML message(s) to specify an XPath based selector thus causing the broker to evaluate the expression and attempt to match it against the messages in the queue while also performing an XML external entity resolution.

In order to successfully exploit this vulnerability, an attacker would need to act on behalf of both a publisher and consumer. The following is an attack pattern which will result in triggering the XXE resolution.

	1.	A publisher enqueues an XML message which contains external entity references.
	2.	A consumer requests dequeuing an XML message using an XPath based selector.
	3.	The broker will evaluate the XPath expression and attempt to match it against the messages in the queue while resolving any external entity references.

Cause:

XML parsing as handled by ActiveMQ does not restrict processing of external entities.

The vulnerable code responsible for handling XPath based selectors is part of the org.apache.activemq.filter package which consists of two virtually identical classes, namely JAXPXPathEvaluator and XalanXPathEvaluator. 

public class JAXPXPathEvaluator implements XPathExpression.XPathEvaluator {
	// ...
	private boolean evaluate(byte[] data) {
        try {
            InputSource inputSource = new InputSource(new ByteArrayInputStream(data));
            return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue(); // Trigering XXE resolution
        } catch (XPathExpressionException e) {
            return false;
        }
    }

    private boolean evaluate(String text) {
        try {
            InputSource inputSource = new InputSource(new StringReader(text));
            return ((Boolean)expression.evaluate(inputSource, XPathConstants.BOOLEAN)).booleanValue(); // Trigering XXE resolution
        } catch (XPathExpressionException e) {
            return false;
        }
    }
    // ...
}

Successful exploitation of this vulnerability would result in server-side request forgery or arbitrary local file disclosure.

Affected Versions: Apache ActiveMQ 5.10.0, Apache Apollo 1.7

3. LDAP Wildcard Interpretation

Description:

When LDAP authentication is enabled, it is possible for an attacker to supply a wildcard operator instead of a username, which will effectively allow him to brute force a password for an unknown but valid account as opposed to brute forcing a combination of username and password. Once a valid password is found, the attacker can successfully authenticate with LDAP and publish/subscribe to a queue.

Cause:

No user input validation is performed prior the pre-binding username existence check.

The vulnerable class and method are LDAPLoginModule and authenticate respectively, part of the org.apache.activemq.jaas package.

A pre-binding check is performed to confirm if the specified username belongs to a valid account in LDAP. When performing this check for a wildcard operator, a NamingEnumeration<SearchResult> list of any available accounts in LDAP will be returned. Subsequently, the username as returned in the first list element will be used to perform LDAP binding.

public class LDAPLoginModule implements LoginModule {
	    protected boolean authenticate(String username, String password) throws LoginException {
        //...
        try {

            String filter = userSearchMatchingFormat.format(new String[] {
                username
            });
            //...
            if (log.isDebugEnabled()) {
                log.debug("Get the user DN.");
                log.debug("Looking for the user in LDAP with ");
                log.debug("  base DN: " + getLDAPPropertyValue(USER_BASE));
                log.debug("  filter: " + filter);
            }

            NamingEnumeration<SearchResult> results = context.search(getLDAPPropertyValue(USER_BASE), filter, constraints); // Perform a username check
            //...
            SearchResult result = results.next(); // Retrieve an element from the list
            //...
            String dn;
            if (result.isRelative()) {
                log.debug("LDAP returned a relative name: {}", result.getName());

                NameParser parser = context.getNameParser("");
                Name contextName = parser.parse(context.getNameInNamespace());
                Name baseName = parser.parse(getLDAPPropertyValue(USER_BASE));
                Name entryName = parser.parse(result.getName());
                Name name = contextName.addAll(baseName);
                name = name.addAll(entryName); // Retrieve the username for this element
                dn = name.toString();
            } else {
                //...
            }

            if (log.isDebugEnabled()) {
                log.debug("Using DN [" + dn + "] for binding.");
            }
            // ...
            if (bindUser(context, dn, password)) { // Perform binding for this username
                //...
            }
            //...
        }
        //...
    }
}

Affected Versions: Apache ActiveMQ 5.10.0, Apache Apollo 1.7