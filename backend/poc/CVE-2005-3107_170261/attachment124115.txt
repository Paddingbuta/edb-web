#define _GNU_SOURCE
#include <stdio.h>
#include <pthread.h>
#include <sys/ptrace.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <sys/syscall.h>

static pthread_barrier_t barrier;

static void *idler(void *arg)
{
  *(int *) arg = syscall(__NR_gettid);
  pthread_barrier_wait(&barrier);
  while (1) pause ();
  return 0;
}

static int doexec;

static void *func(void *arg)
{
  int maintid = getpid(), idlertid;
  int status;
  pthread_t tid;

  int ret = pthread_create(&tid, NULL, idler, &idlertid);
  if (ret != 0)
    printf("pthread_create: %s\n", strerror (ret));

  pthread_barrier_wait(&barrier);

  if (ptrace(PTRACE_ATTACH, maintid, 0L, 0L) != 0)
    perror("ptrace on leader");

  if (waitpid(maintid, &status, WUNTRACED|__WALL) != maintid)
    perror("waitpid");

  printf("main thread %d status %x\n", maintid, status);

  if (ptrace(PTRACE_ATTACH, idlertid, 0L, 0L) != 0)
    perror("ptrace on idler");

  if (waitpid(idlertid, &status, WUNTRACED|__WALL) != idlertid)
    perror("waitpid");

  printf("idler thread %d status %x\n", idlertid, status);

#define PTRACE_SETOPTIONS	0x4200
#define PTRACE_O_TRACEEXIT	0x00000040
  if (ptrace(PTRACE_SETOPTIONS, idlertid, 0l, PTRACE_O_TRACEEXIT) != 0)
    perror("PTRACE_SETOPTIONS");

  if (doexec) {
    puts("trying exec");
    execl("/bin/echo", "/bin/echo", "hello", (char *) 0);
    perror("/bin/echo");
    exit(3);
  } else {
    puts("trying crash");
    *(volatile int *)&func = 1;
  }

  exit(0);

  return 0;
}

int main(int argc, char **argv)
{
  int ret, idlertid, status;
  pthread_t tid;

  doexec = argc < 2;

  ret = pthread_barrier_init(&barrier, NULL, 2);
  if (ret != 0)
    printf("pthread_barrier_init1: %s\n", strerror (ret));

  ret = pthread_create(&tid, NULL, idler, &idlertid);
  if (ret != 0)
    printf("pthread_create1: %s\n", strerror (ret));

  ret = pthread_barrier_wait(&barrier);
  if (ret != 0 && ret != PTHREAD_BARRIER_SERIAL_THREAD)
    printf("pthread_barrier_wait: %d\n", ret);

  sleep(1);

  if (ptrace(PTRACE_ATTACH, idlertid, 0L, 0L) != 0)
    perror("main ptrace on idler");
  if (waitpid(idlertid, &status, WUNTRACED|__WALL) != idlertid)
    perror("main waitpid on idler");
  if (ptrace(PTRACE_SETOPTIONS, idlertid, 0l, PTRACE_O_TRACEEXIT) != 0)
    perror("PTRACE_SETOPTIONS");

  ret = pthread_barrier_destroy(&barrier);
  if (ret != 0)
    printf("pthread_barrier_destroy: %s\n", strerror (ret));
  ret = pthread_barrier_init(&barrier, NULL, 2);
  if (ret != 0)
    printf("pthread_barrier_init2: %s\n", strerror (ret));
  ret = pthread_create(&tid, NULL, func, NULL);
  if (ret != 0)
    printf("pthread_create2: %s\n", strerror (ret));

  while (1) pause();

  return 99;
}
