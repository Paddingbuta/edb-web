{
    "bugid": "133098",
    "cveid": [
        "CVE-2004-0813"
    ],
    "summary": "CVE-2004-0813 SG_IO unsafe user command execution",
    "alias": "None",
    "product": "Red Hat Enterprise Linux 3",
    "hardware": "All",
    "os": "Linux",
    "url": "",
    "reported_date": "2004-09-21 18:08 UTC byJosh Bressers",
    "attachment": [
        "https://bugzilla-attachments.redhat.com/attachment.cgi?id=150940"
    ],
    "comment": [
        "It is possible that a user with read only access to a device to issue\narbitrary commands (ie 'write' or 'erase firmware').\n\nThere is a discussion on the lkmlhttp://lkml.org/lkml/2004/7/30/147",
        "Should be for RHEL4 surely not RHEL3",
        "Alan, wouldn't any RHEL4 exposure to this also occur on RHEL3?\n\nI briefly examined sg_new_write() and sg_ioctl() for the SG_IO\ncase (in drivers/scsi/sg.c), and both 2.6 and RHEL3 seem to use\n\"read_only\" similarly (but I'm not sure where the alleged bug is).",
        "CAN-2004-0813",
        "Well, I agree with Alan.  This is for RHEL4 not RHEL3.  Not only that,\nbut it appears to be fixed in upstream 2.6 kernels at this point.\n\nSo, to answer Ernie's question about where the bug is.  In RHEL3, you\ngrant access to a block device by giving permissions to the\n/dev/{hd,sd,sr,etc.} files.  You grant access to SG_IO ioctls by\nsetting permissions on /dev/sg files.  So, even if the SG_IO routines\ndidn't check anything before allowing a user to blank the device or\noverwrite a firmware, the user still had to be able to open the\n/dev/sg* file associated with the device, not just the normal device file.\n\nWhen Jens moved the SG_IO functionality out of the scsi layer and into\nthe block layer, the SG_IO ioctls now became valid ioctls on all block\ndevices.  So permissions that used to apply only to regular block\ndevice access (/dev/{hd,sd,sr,etc}) now applied to the SG_IO ioctls as\nwell and this had unintended side effects.   <--- The Bug\n\nTo resolve the issue, the 2.6 kernel now implements a read-only vs.\nwrite-required filter on SG_IO packets that compares the requested\noperation against a table and determines if the command is allowed\n(see verify_command in drivers/block/scsi_ioctl.c in current 2.6 kernels).\n\nSo, looks like this was a short lived security issue that only existed\nin the 2.6 kernel series for a short while, and doesn't effect RHEL3\nat all.\n\nAlan, Ernie, any disagreement on that conclusion?",
        "Doug, I concur, and have just verified that /dev/sg* files on\na RHEL3 U3 installation all have 660 (uid \"root\", gid \"disk\"),\nand thus unprivileged users would not be able to open any of\nthese character special files in order to perform any ioctls.\n\nDoug/Alan, should this bug be closed now?",
        "I believe so.  Alan?",
        "Actually our pam setup will give console users write access to\n/dev/sg* afaics ....",
        "It isnt supposed to. If our pam_console rules are wrong please open a\npam bug about that. I agree this can closed.",
        "To summarize my understanding:\n\nIn RHEL /dev/sg* are 660 root.disk and altered to be owned by the\nconsole user at login.  So there is no case where we only issue read\naccess and don't want write access.  Therefore this particular kernel\nissue isn't going to affect RHEL users, closing.\n\n(The bigger issue outside the scope of this bug is that we want to be\nable to give the console user write access to a cdrom without them\nbeing able to flash firmware etc).",
        "Disagree entirely. The bug allows every user to bypass file\npermissions, it also allows them to load modified firmware that\nbypasses system security and it allows any local user exploit to\ntrivially get CAP_SYS_RAWIO and/or destroy hardware.\n\nOne trivial end user mistake, one app run by that user that should not\nhave been and game over send computer back to Dell.\n\ncdrecord supports setuid operation and has been audited for it, its\nalso got a fairly good record and having reviewed the code seems far\nmore secure than allowing all users to own the computer.\n\nRe-opening.",
        "Alan: Are you wanting the /dev/sg* permissions modified or are you\nwanting a kernel change?  If it's the /dev/sg* permissions, then this\nbug needs reassigned to whomever owns the pam stuff and another bug\nshould be opened on cdrecord et al to get them whipped into shape for\nsuid operation so that user's don't suddenly stop being able to burn\nCDs when they get the relevant security update.",
        "Note that there has been considerable patches added after the 2.6.8 upstream\npatch to correct this, and SUSE hadCAN-2004-1190also issues for \"firmware\noverwrites /dev/cdrom\".  For many details seehttp://bugs.debian.org/cgi-bin/bugreport.cgi?bug=300162",
        "The /dev/sg* permissions would be modified by pam_console only if they are\nlinked by udev (or kudzu) as /dev/cdrom* or /dev/cdwriter*\n\nThe same applies to /dev/sd* and /dev/hd*",
        "Doug, if I follow your remarks incomment #5correctly, this bug should be\nagainst either pam_console or RHEL-4 kernel, but not RHEL-3 kernel.  Is that\nstill your opinion?\n\nI followed the recent thread (flamewar?) on the linux-scsi mailing list. \nUpstream seems to be working toward a per-device /sysfs-based solution to move\nthe policy decision about which SCSI commands are allowed by SG_IO ioctls out of\nthe kernel.  This is not anywhere near finished yet, though.  In the meantime,\nthe verify_command function in drivers/block/scsi_ioctl.c is already in the\nRHEL-4 kernel.\n\nSo what exactly is the bug?\n\nChip",
        "Relevant (old) thread herehttp://groups-beta.google.com/group/linux.kernel/browse_frm/thread/5cfe44b11c8a99c5/ed58b3d4b1cfa39b?q=scsi_ioctl+firmware#ed58b3d4b1cfa39b",
        "You could probably update pam to make cdwrite devices owned by root.cdburner,\ncreate the new cdburner group, and make cdrecord sgid cdburner.",
        "Createdattachment 135302[details]Possible fix\n\nOK, this might do the trick.  It's similar to my original patch, the main\ndifference being that it adds a switch (dev_type) statement and for the common\nbootable device, TYPE_DISK, TYPE_WORM, TYPE_ROM, TYPE_MOD, it activates the\ncommand filtering and in the event of a blocked opcode it warns exactly once\nfor each opcode (and if you are root it warns but then allows the opcode\nanyway).  This way, non-bootable devices are not broken nor affected, bootable\ndevice are protected plus we will have the ability to have people run things as\nroot to get past the limitations and should we need to train this, we will know\nthe opcode we need to train from the block messages.\n\nI only worked on the sg file access because A) the block layer doesn't have\nSG_IO ioctl capability and B) the scsi layers SCSI_IOCTL_SEND_CMD is root only,\nso that only leaves the sg.c file as a possible point of weakness.\n\nI still contend this has the possibility of breaking a *lot* of customer\nsetups.  Things like assigning raid device files to group wheel and making them\nrw for wheel, then having admins run hardware raid management utilities without\nbeing root, stuff like that.  But, at least by limiting the restrictions to\nbootable devices we are limiting the overall amount of breakage.",
        "Createdattachment 135398[details]Slightly cleaned up and more readable version of same patch\n\nThis makes the previous patch slightly more readable and the logic in the\nactual command tests a little easier to follow.  This is the patch I actually\nsubmitted internally for review/possible inclusion in the kernel.  As noted in\nmy internal email, I expect this patch to break some setups.  For example, late\nmodel Plextor CD burners will require the user to su to root before running\ncdrecord or else they won't work.  Additionally, it's possible some raid device\nmanagement software will now need to be run as root where it used to work just\nby giving administrators read/write permissions to the raid management device. \nHowever, there is nothing that should fail to work if the user has run the\ncommand with root privileges.  So, in the event that breakage does occur, the\nusage of sudo or something like console-helper to run the command as root will\nwork around the problem.",
        "Product Management has reviewed and declined this request.  You may appeal this\ndecision by reopening this request.",
        "Indeed. I'll reopen this until either its fixed or someone fires me. Its a\ndisgrace and those involved should be embarrased.",
        "I've filedbug 232096against cdrecord and I'm moving this bug to be against\npam.  cdrecord can use consolehelper to let the local user execute the command\nas root.  pam_console should not allow local users access to the /dev/sg devices.\n\nI've markedbug 232096as depending on this bug.",
        "Can I do strange things to other SG devices with cdrecord being executed as root?\nCan cdrecord be used to gain root access?",
        "We will probably need to add a few patches to our cdrecord.  We've not fixed\nflaws that could gain root in the past since it wasn't suid root.  I'll find the\nlist and note what we'll need inbug 232096.\n\nAFAIK a user can't do anything out of the ordinary to non cd writers with cdrecord.",
        "Can you make consolehelper start the program as sgid <something> instead of suid\nroot?  If so, you could still do the \"make cdburner sg devices owned by group\ncdburner and group writable\" and use consolehelper to set the program to sgid\ncdburner, which avoids any possible root compromise holes in cdrecord.\n\nAnd no, cdrecord won't futz with other devices willingly (although I don't know\nif it can be tricked).",
        "Yes, this makes more sense.  Thanks Doug.",
        "That's somewhat significantly more work, as you need something that tracks CD\nburners and hotplug and knows to change the ownership to the CD groups - we\ndon't have any of that code (that code only exists for pam_console, and only\nchanges to the user). Unless I'm forgetting what pam_console can do.",
        "cdrecord is designed to run setuid. not setgid. Its internal code is tested for\nsetuid not setgid cases and it handles setuidness internally and explicitly already.\n\nYeah root is the *wrong* user but group might need a tweak to cdrecord if unlucky. \n\nDoug is right that cdrecord won't futz with other devices, if it is in say\n\"setgid disk\" category then it'll still only talk to CD devices. It's actually\nvery careful because on many OS's it has to run setuid root to do anything at all.",
        "Note that when a command is run through consolehelper it is not 'setuid root' it\nis run with both real and effective uids as root and this is certainly not what\nwe want. We would need to patch userhelper to add support for running program\nwith only effective id set to root.",
        "Hmm, that won't work.  How hard is it going to be to set cdrecord to be setuid\nroot then, and restrict execution to only the local users?",
        "Unfortunately consolehelper doesn't have this option. But there is another\noption - add a PAM authentication patch to the (setuid root) cdrecord.",
        "How much work would that be?  I've not done a lot of pam development.",
        "Createdattachment 150938[details]Simple PAM support for cdrecord\n\nActually it is pretty simple. The patch (untested) should provide that - it\nwill call PAM if the cdrecord is called with euid != uid && euid == 0.",
        "Createdattachment 150940[details]PAM configuration for cdrecord (/etc/pam.d/cdrecord)",
        "DEV ACK. Pls lets make this one go away... correctly! Tomas Thanks!",
        "One question - what about users who modified their console.perms - should there\nbe a %post script in the PAM package which would remove the /dev/cdwriter* from\nthe file using sed?\n\nIt can be potentially dangerous to mess with user modified files, also .rpmnew\nfile will be created so it is questionable whether it is necessary. On the other\nhand the security problem will be unresolved if the /dev/cdwriter* is not\nremoved from console.perms.",
        "As long as we note the change in the errata text, this won't be an issue.  We\nshould let users with modified console.perms files fix them if they're\ninterested in this flaw.",
        "what about:\nisoinfo\nisodump\nisovfy\nisodebug\ncdrdao\ndevdump\nreadcd\nskel\n\nPatch with pam and make them suid also?",
        "cdrecord and cdrdao need cd writer write access.  all the others in your list\nshould be  fine with just read access (last I knew, they don't use raw scsi\ncommands to talk to the device, just block access).  So, being that they only\nneed read access, I don't know if you'll have to go all the way to suid root or\nsome such, or whether permissions could be set to simply allow read access for them.",
        "readcd also can use /dev/sg stuff I believe.\n\nThe others just need read access via the normal device file",
        "Yes but even for the read access to /dev/sg you have to make the readcd suid\nbecause /dev/sg nodes cannot be readable for all.\n\nAre cdrdao and readcd actually written so they drop priviledges if they are made\nsuid?",
        "An advisory has been issued which should help the problem\ndescribed in this bug report. This report is therefore being\nclosed with a resolution of ERRATA. For more information\non the solution and/or where to find the updated files,\nplease follow the link below. You may reopen this bug report\nif the solution does not work for you.http://rhn.redhat.com/errata/RHSA-2007-0465.html"
    ]
}