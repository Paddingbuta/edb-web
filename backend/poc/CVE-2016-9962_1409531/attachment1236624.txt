From a8ba9b0dccb4bc5894c51deb0b7e646951fd7be1 Mon Sep 17 00:00:00 2001
From: Kenfe-Mickael Laventure <mickael.laventure@gmail.com>
Date: Thu, 15 Dec 2016 14:57:24 -0800
Subject: [PATCH] Add security patches for runc

Signed-off-by: Kenfe-Mickael Laventure <mickael.laventure@gmail.com>
---
 Dockerfile                                         |   2 +
 Dockerfile.aarch64                                 |   2 +
 Dockerfile.armhf                                   |   2 +
 Dockerfile.gccgo                                   |   2 +
 Dockerfile.ppc64le                                 |   2 +
 Dockerfile.s390x                                   |   2 +
 Dockerfile.simple                                  |   2 +
 VERSION                                            |   2 +-
 hack/make/build-deb                                |   6 +-
 hack/make/build-rpm                                |   6 +-
 .../0001-Set-init-processes-as-non-dumpable.patch  | 111 +++++++++++++++++++++
 11 files changed, 136 insertions(+), 3 deletions(-)
 create mode 100644 patches/runc/0001-Set-init-processes-as-non-dumpable.patch

diff --git a/Dockerfile b/Dockerfile
index ea15ae4..c271e84 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -242,12 +242,14 @@ RUN set -x \
 	&& rm -rf "$GOPATH"
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
 	&& git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="seccomp apparmor selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/Dockerfile.aarch64 b/Dockerfile.aarch64
index 6e5f483..b4fd6ac 100644
--- a/Dockerfile.aarch64
+++ b/Dockerfile.aarch64
@@ -181,12 +181,14 @@ RUN set -x \
 	&& rm -rf "$GOPATH"
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
 	&& git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="seccomp apparmor selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/Dockerfile.armhf b/Dockerfile.armhf
index aa587a7..8be3156 100644
--- a/Dockerfile.armhf
+++ b/Dockerfile.armhf
@@ -190,12 +190,14 @@ RUN set -x \
 	&& rm -rf "$GOPATH"
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
 	&& git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="seccomp apparmor selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/Dockerfile.gccgo b/Dockerfile.gccgo
index a032c51..b494c18 100644
--- a/Dockerfile.gccgo
+++ b/Dockerfile.gccgo
@@ -74,12 +74,14 @@ WORKDIR /go/src/github.com/docker/docker
 ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
     && git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="seccomp apparmor selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/Dockerfile.ppc64le b/Dockerfile.ppc64le
index 7463447..ef8f535 100644
--- a/Dockerfile.ppc64le
+++ b/Dockerfile.ppc64le
@@ -195,12 +195,14 @@ RUN set -x \
 	&& rm -rf "$GOPATH"
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
 	&& git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="apparmor seccomp selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/Dockerfile.s390x b/Dockerfile.s390x
index 6382c82..3320376 100644
--- a/Dockerfile.s390x
+++ b/Dockerfile.s390x
@@ -197,12 +197,14 @@ RUN set -x \
 	&& rm -rf "$GOPATH"
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
 	&& git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="seccomp apparmor selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/Dockerfile.simple b/Dockerfile.simple
index 07edadd..1fc77ff 100644
--- a/Dockerfile.simple
+++ b/Dockerfile.simple
@@ -57,12 +57,14 @@ ENV GOPATH /go:/go/src/github.com/docker/docker/vendor
 ENV CGO_LDFLAGS -L/lib
 
 # Install runc
+COPY patches /tmp/patches
 ENV RUNC_COMMIT f59ba3cdd76fdc08c004f42aa915996f6f420899
 RUN set -x \
 	&& export GOPATH="$(mktemp -d)" \
 	&& git clone https://github.com/docker/runc.git "$GOPATH/src/github.com/opencontainers/runc" \
 	&& cd "$GOPATH/src/github.com/opencontainers/runc" \
 	&& git checkout -q "$RUNC_COMMIT" \
+	&& git am /tmp/patches/runc/* \
 	&& make static BUILDTAGS="seccomp apparmor selinux" \
 	&& cp runc /usr/local/bin/docker-runc \
 	&& rm -rf "$GOPATH"
diff --git a/VERSION b/VERSION
index e0a6b34..456e5c4 100644
--- a/VERSION
+++ b/VERSION
@@ -1 +1 @@
-1.12.5
+1.12.6
diff --git a/hack/make/build-deb b/hack/make/build-deb
index 74b46cb..8587fef 100644
--- a/hack/make/build-deb
+++ b/hack/make/build-deb
@@ -66,15 +66,19 @@ set -e
 		EOF
 
 		# get the RUNC and CONTAINERD commit from the root Dockerfile, this keeps the commits in sync
+		awk '$1 == "COPY" && $2 == "patches" { print; exit }' Dockerfile >> "$DEST/$version/Dockerfile.build"
 		awk '$1 == "ENV" && $2 == "RUNC_COMMIT" { print; exit }' Dockerfile >> "$DEST/$version/Dockerfile.build"
 		awk '$1 == "ENV" && $2 == "CONTAINERD_COMMIT" { print; exit }' Dockerfile >> "$DEST/$version/Dockerfile.build"
 
 		# add runc and containerd compile and install
 		cat >> "$DEST/$version/Dockerfile.build" <<-EOF
+			# Set user.email so crosbymichael's in-container merge commits go smoothly
+			RUN git config --global user.email 'docker-dummy@example.com'
 			# Install runc
 			RUN git clone https://github.com/docker/runc.git "/go/src/github.com/opencontainers/runc" \
 					&& cd "/go/src/github.com/opencontainers/runc" \
-					&& git checkout -q "\$RUNC_COMMIT"
+					&& git checkout -q "\$RUNC_COMMIT" \
+					&& git am /tmp/patches/runc/*
 			RUN set -x && export GOPATH="/go" && cd "/go/src/github.com/opencontainers/runc" \
 					&& make BUILDTAGS="\$RUNC_BUILDTAGS" && make install
 			# Install containerd
diff --git a/hack/make/build-rpm b/hack/make/build-rpm
index 18ff488..b7cf7bc 100644
--- a/hack/make/build-rpm
+++ b/hack/make/build-rpm
@@ -93,15 +93,19 @@ set -e
 		EOF
 
 		# get the RUNC and CONTAINERD commit from the root Dockerfile, this keeps the commits in sync
+		awk '$1 == "COPY" && $2 == "patches" { print; exit }' Dockerfile >> "$DEST/$version/Dockerfile.build"
 		awk '$1 == "ENV" && $2 == "RUNC_COMMIT" { print; exit }' Dockerfile >> "$DEST/$version/Dockerfile.build"
 		awk '$1 == "ENV" && $2 == "CONTAINERD_COMMIT" { print; exit }' Dockerfile >> "$DEST/$version/Dockerfile.build"
 
 		# add runc and containerd compile and install
 		cat >> "$DEST/$version/Dockerfile.build" <<-EOF
+			# Set user.email so crosbymichael's in-container merge commits go smoothly
+			RUN git config --global user.email 'docker-dummy@example.com'
 			# Install runc
 			RUN git clone https://github.com/docker/runc.git "/go/src/github.com/opencontainers/runc" \
 					&& cd "/go/src/github.com/opencontainers/runc" \
-					&& git checkout -q "\$RUNC_COMMIT"
+					&& git checkout -q "\$RUNC_COMMIT" \
+					&& git am /tmp/patches/runc/*
 			RUN set -x && export GOPATH="/go" && cd "/go/src/github.com/opencontainers/runc" \
 					&& make BUILDTAGS="\$RUNC_BUILDTAGS" && make install
 			# Install containerd
diff --git a/patches/runc/0001-Set-init-processes-as-non-dumpable.patch b/patches/runc/0001-Set-init-processes-as-non-dumpable.patch
new file mode 100644
index 0000000..937ba38
--- /dev/null
+++ b/patches/runc/0001-Set-init-processes-as-non-dumpable.patch
@@ -0,0 +1,111 @@
+From 50a19c6ff828c58e5dab13830bd3dacde268afe5 Mon Sep 17 00:00:00 2001
+From: Michael Crosby <crosbymichael@gmail.com>
+Date: Wed, 7 Dec 2016 15:05:51 -0800
+Subject: [PATCH] Set init processes as non-dumpable
+
+This sets the init processes that join and setup the container's
+namespaces as non-dumpable before they setns to the container's pid (or
+any other ) namespace.
+
+This settings is automatically reset to the default after the Exec in
+the container so that it does not change functionality for the
+applications that are running inside, just our init processes.
+
+This prevents parent processes, the pid 1 of the container, to ptrace
+the init process before it drops caps and other sets LSMs.
+
+This patch also ensures that the stateDirFD being used is still closed
+prior to exec, even though it is set as O_CLOEXEC, because of the order
+in the kernel.
+
+https://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318
+
+The order during the exec syscall is that the process is set back to
+dumpable before O_CLOEXEC are processed.
+
+Signed-off-by: Michael Crosby <crosbymichael@gmail.com>
+---
+ libcontainer/init_linux.go          | 3 ++-
+ libcontainer/nsenter/nsexec.c       | 5 +++++
+ libcontainer/setns_init_linux.go    | 7 ++++++-
+ libcontainer/standard_init_linux.go | 3 +++
+ 4 files changed, 16 insertions(+), 2 deletions(-)
+
+diff --git a/libcontainer/init_linux.go b/libcontainer/init_linux.go
+index b1e6762..4043d51 100644
+--- a/libcontainer/init_linux.go
++++ b/libcontainer/init_linux.go
+@@ -77,7 +77,8 @@ func newContainerInit(t initType, pipe *os.File, stateDirFD int) (initer, error)
+ 	switch t {
+ 	case initSetns:
+ 		return &linuxSetnsInit{
+-			config: config,
++			config:     config,
++			stateDirFD: stateDirFD,
+ 		}, nil
+ 	case initStandard:
+ 		return &linuxStandardInit{
+diff --git a/libcontainer/nsenter/nsexec.c b/libcontainer/nsenter/nsexec.c
+index b93f827..4b5398b 100644
+--- a/libcontainer/nsenter/nsexec.c
++++ b/libcontainer/nsenter/nsexec.c
+@@ -408,6 +408,11 @@ void nsexec(void)
+ 	if (pipenum == -1)
+ 		return;
+ 
++	/* make the process non-dumpable */
++	if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) != 0) {
++		bail("failed to set process as non-dumpable");
++	}
++
+ 	/* Parse all of the netlink configuration. */
+ 	nl_parse(pipenum, &config);
+ 
+diff --git a/libcontainer/setns_init_linux.go b/libcontainer/setns_init_linux.go
+index 2a8f345..7f5f182 100644
+--- a/libcontainer/setns_init_linux.go
++++ b/libcontainer/setns_init_linux.go
+@@ -5,6 +5,7 @@ package libcontainer
+ import (
+ 	"fmt"
+ 	"os"
++	"syscall"
+ 
+ 	"github.com/opencontainers/runc/libcontainer/apparmor"
+ 	"github.com/opencontainers/runc/libcontainer/keys"
+@@ -16,7 +17,8 @@ import (
+ // linuxSetnsInit performs the container's initialization for running a new process
+ // inside an existing container.
+ type linuxSetnsInit struct {
+-	config *initConfig
++	config     *initConfig
++	stateDirFD int
+ }
+ 
+ func (l *linuxSetnsInit) getSessionRingName() string {
+@@ -49,5 +51,8 @@ func (l *linuxSetnsInit) Init() error {
+ 	if err := label.SetProcessLabel(l.config.ProcessLabel); err != nil {
+ 		return err
+ 	}
++	// close the statedir fd before exec because the kernel resets dumpable in the wrong order
++	// https://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318
++	syscall.Close(l.stateDirFD)
+ 	return system.Execv(l.config.Args[0], l.config.Args[0:], os.Environ())
+ }
+diff --git a/libcontainer/standard_init_linux.go b/libcontainer/standard_init_linux.go
+index 2104f1a..6a65154 100644
+--- a/libcontainer/standard_init_linux.go
++++ b/libcontainer/standard_init_linux.go
+@@ -171,6 +171,9 @@ func (l *linuxStandardInit) Init() error {
+ 			return newSystemErrorWithCause(err, "init seccomp")
+ 		}
+ 	}
++	// close the statedir fd before exec because the kernel resets dumpable in the wrong order
++	// https://github.com/torvalds/linux/blob/v4.9/fs/exec.c#L1290-L1318
++	syscall.Close(l.stateDirFD)
+ 	if err := syscall.Exec(name, l.config.Args[0:], os.Environ()); err != nil {
+ 		return newSystemErrorWithCause(err, "exec user process")
+ 	}
+-- 
+2.11.0
+
-- 
2.10.0

